<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《自动控制原理》复习笔记</title>
    <link href="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>参考教材：《自动控制原理》第二版 孙优贤</p><h1 id="第一章-控制系统概论">第一章 控制系统概论</h1><p>导论内容，后续补充</p><h1 id="第二章-连续时间控制系统的数学模型">第二章连续时间控制系统的数学模型</h1><h1 id="第三章-连续时间控制系统的时域分析">第三章连续时间控制系统的时域分析</h1><h1 id="第四章-连续时间控制系统的稳定性与稳态误差">第四章连续时间控制系统的稳定性与稳态误差</h1><h2 id="劳斯稳定性判据">4.1 劳斯稳定性判据</h2><p>判断LTI系统（线性时不变系统）的稳定性，充要条件是<strong>系统的特征值均具有负实部</strong>，即特征值均在<em>虚轴左侧</em>，或者说特征方程<spanclass="math inline">\(Q(s)=a_ns^n+a_{n-1}s^{n-1}+...+a_1s+a_0=0\)</span>的根均在<em>虚轴左侧</em>。</p><p>对于低阶方程，可直接求解特征方程；但方程阶次提高时，直接求解难度较大，可通过<strong>劳斯判据</strong>判断根是否在左半开平面。</p><blockquote><p>tips :由于考试时可以带计算器，所以如果特征方程里面没有未知数，也可以直接用计算器算高阶特征方程的根来判断稳定性</p></blockquote><p>如果所有特征根均位于S平面的左半平面，则：</p><ul><li><p>特征多项式的所有系数均有相同的符号；</p></li><li><p>所有系数均为非零常数</p></li></ul><p>以上为<strong>必要不充分条件</strong>，所有系数非零且同号不能判断是否稳定，但稳定时的特征多项式一定满足系数非零且同号。</p><p>劳斯判据是判别系统稳定性的<strong>充分必要条件</strong>。</p><h3 id="劳斯判据步骤">4.1.1 劳斯判据步骤</h3><ol type="1"><li>将系统特征多项式的<spanclass="math inline">\(Q(s)=a_ns^n+a_{n-1}s^{n-1}+...+a_1s+a_0\)</span>的系数排列成如下两行：</li></ol><p><span class="math display">\[\begin{array}{c|ccccc}s^n &amp; a_n &amp; a_{n-2} &amp; a_{n-4} &amp; a_{n-6} &amp; \cdots \\s^{n-1} &amp; a_{n-1} &amp; a_{n-3} &amp; a_{n-5} &amp; a_{n-7} &amp;\cdots \\\end{array}\]</span></p><ol start="2" type="1"><li>计算并完成劳斯阵列</li></ol><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250527161247296.png" class="" title="计算并完成劳斯阵列"><p>计算时，如果行列式对应位置没有元素，应补0</p><ol start="3" type="1"><li>特征方程根中，正实部根的个数 =劳斯阵列中第一列元素<strong>符号变化的次数</strong></li></ol><p>​稳定的充要条件：<strong>劳斯阵列的第一列元素没有符号变化</strong></p><ol start="4" type="1"><li>计算技巧：</li></ol><ul><li>对于如下劳斯阵列</li></ul><p><span class="math display">\[\begin{array}{c|cc}s^3 &amp; a_3 &amp; a_1 \\s^2 &amp; a_2 &amp; a_0 \\s^1 &amp; c_1 &amp; 0 \\s^0 &amp; d_1 &amp; 0 \\\end{array}\]</span></p><p>其中<span class="math inline">\(d_1\)</span>可计算为<spanclass="math inline">\(d_1 = \frac{-1}{c_1} \begin{vmatrix} a_2 &amp; a_0\\ c_1 &amp; 0 \end{vmatrix} = a_0\)</span>，<spanclass="math inline">\(a_0\)</span>下面的数为0时可以将<spanclass="math inline">\(a_0\)</span>平移过去。</p><ul><li>劳斯阵列同一行可以同乘/除一个元素，不影响最终结果</li></ul><h3 id="一些结论">4.1.2 一些结论</h3><ul><li>对于<strong>二阶系统</strong>，特征多项式为：<spanclass="math inline">\(Q(s)=a_2s^2+a_1s+a_0\)</span></li></ul><p>二阶系统稳定的充要条件是：<strong>特征多项式所有系数都具有相同的符号</strong></p><ul><li>对于<strong>三阶系统</strong>，特征多项式为：<spanclass="math inline">\(Q(s)=a_3s^3+a_2s^2+a_1s+a_0\)</span></li></ul><p>三阶系统稳定的充要条件是：<strong><spanclass="math inline">\(a_0,a_1,a_2,a_3,\frac{a_2a_1-a_0a_3}{a_2}\)</span>同号</strong>，或<strong><spanclass="math inline">\(a_0,a_1,a_2,a_3\)</span>同号，且<spanclass="math inline">\(a_2a_1-a_0a_3&gt;0\)</span></strong></p><h3 id="特殊情况">4.1.3 特殊情况</h3><ol type="1"><li>首列出现零元素，但在零元素所在的行中具有非零的其他元素</li></ol><p>两种解决方法：</p><ul><li><p>方法一：将<spanclass="math inline">\(s=\frac{1}{x}\)</span>代入原方程，重新整理特征多项式<spanclass="math inline">\(Q_{new}(x)\)</span>，写出新特征多项式的劳斯阵列，用劳斯判据判断。$s<span class="math inline">\(时，\)</span>s<spanclass="math inline">\(和\)</span><spanclass="math inline">\(是同号的，所以可以通过判断\)</span>Q_{new}(x)<spanclass="math inline">\(的根的分布来间接判断\)</span>Q(s)$根的分布。</p></li><li><p>方法二：将原特征多项式乘以因式<spanclass="math inline">\((s+1)\)</span>，重新整理特征多项式，写出新的劳斯阵列。<spanclass="math inline">\(s+1=0\)</span>的根在左半平面，不会影响劳斯判据的判断。</p></li></ul><ol start="2" type="1"><li>出现全零行——代表系统<strong>不稳定</strong>，且特征方程具有对称于原点的实根或复根，形式为：<spanclass="math inline">\(s^2,(s+\sigma)(s-\sigma),(s+j\omega)(s-j\omega),(s^2+2\zeta\omega_ns+\omega_n^2)(s^2-2\zeta\omega_ns+\omega_n^2)\)</span></li></ol><p>两种解决方法：</p><ul><li>方法一：用一个很小的<strong>正数</strong><spanclass="math inline">\(\varepsilon\)</span>代替这一行的首个0，然后继续计算其他元素，获得的是除对称特征根以外其他根的信息。</li><li>方法二：如果劳斯阵列第<spanclass="math inline">\(i\)</span>行（<spanclass="math inline">\(s^i\)</span>对应的行）元素全为零，根据该行的上一非零行构造辅助多项式</li></ul><p><span class="math display">\[U(s)=\beta_1s^{i+1}+\beta_2s^{i-1}+\beta_3s^{i-3}+...\]</span></p><p>​ 其中，<spanclass="math inline">\(\beta_i\)</span>是上一非零行的系数，辅助多项式的阶次为对称特征根的个数，辅助多项式的根即为对称特征根</p><p>​ 原全零行元素替换为辅助多项式关于<spanclass="math inline">\(s\)</span>的导函数的系数，继续完成劳斯阵列表，可获得除对称特征根以外其他特征根的信息</p><p>​如果辅助多项式求出的根是实部为0的对称虚根，对于单位阶跃输入，系统发生等幅震荡，虚部的绝对值为等幅振荡频率。</p><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250530201201798.png" class="" title="等幅振荡解释"><h3 id="劳斯判据应用">4.1.4 劳斯判据应用</h3><ol type="1"><li>稳定裕量的检验：令<span class="math inline">\(s = z -\sigma\)</span>，将虚轴左移<spanclass="math inline">\(\sigma\)</span>，代入得到以<spanclass="math inline">\(z\)</span>为变量的新特征方程。对新的方程使用劳斯判据，若所有根均在新虚轴的左边，则称系统具有稳定裕量<spanclass="math inline">\(\sigma\)</span></li><li>分析系统参数对稳定性的影响（系统设计）</li></ol><h2 id="稳态误差">4.2 稳态误差</h2><h3 id="稳态误差表达式">4.2.1 稳态误差表达式</h3><p>典型方块图如下</p><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250528113644720.png" class="" title="典型方块图"><p>系统误差的两种定义方式：</p><ul><li>从输出端定义：误差=期望输出与实际输出之差<spanclass="math inline">\(e(t)=y_d(t)-y(t)\)</span>，通常无法直接得到，不采用:x:</li><li>从输入端定义：误差=输入信号（设定值）与反馈信号（测量值）之差，<spanclass="math inline">\(e(t)=r(t)-z(t),E(s)=R(S)-Z(s)=R(s)-H(s)Y(s)\)</span>，可以直接得到，常采用</li></ul><p>稳态误差（静态误差、余差）定义为：<spanclass="math inline">\(e_{ss}=\lim_{t\rightarrow \infty}e(t)\)</span></p><p>对于上图，系统输入有：参考输入<spanclass="math inline">\(R(s)\)</span>，干扰输入<spanclass="math inline">\(F(s)\)</span>，系统输出<spanclass="math inline">\(Y(s)=Y_r(s)+Y_f(s)\)</span></p><p>系统误差<spanclass="math inline">\(E(s)=R(s)-H(s)Y(s)=R(s)-H(s)Y_r(s)-H(s)Y_f(s)=E_r(s)+E_f(s)\)</span></p><p>为方便计算，误差分为由<strong>参考输入产生的误差<spanclass="math inline">\(E_r(s)\)</span></strong>和由<strong>干扰输入产生的误差<spanclass="math inline">\(E_f(s)\)</span></strong> <spanclass="math display">\[\begin{eqnarray}E_r(s) &amp;=&amp; R(s) - H(s)Y_r(s) \\~ &amp;=&amp; R(s) - H(s)\frac{G_c(s)G_p(s)}{1 + G_c(s)G_p(s)H(s)}R(s)\\~ &amp;=&amp; \frac{1}{1 + G_c(s)G_p(s)H(s)}R(s)\end{eqnarray}\]</span></p><p><span class="math display">\[E_f(s)=-H(s)Y_f(s)=\frac{-G_f(s)H(s)}{1+G_c(s)G_p(s)H(s)}F(s)\]</span></p><h3 id="终值定理">4.2.2 终值定理</h3><p><strong>内容</strong>：若<spanclass="math inline">\(L[f(t)]=F(s)\)</span>且<spanclass="math inline">\(F(s)\)</span>满足下列条件之一：</p><ul><li><span class="math inline">\(F(s)\)</span>的所有极点在左半开平面</li><li><spanclass="math inline">\(F(s)\)</span>有一个极点在原点，其它极点在左半开平面</li></ul><p>则<span class="math inline">\(f(t)\)</span>存在有界终值并且 <spanclass="math display">\[\lim_{t\rightarrow \infty}f(t) = \lim_{s\rightarrow0}sF(s)\]</span> <strong>等价表述</strong>：若<spanclass="math inline">\(L[f(t)]=F(s)\)</span>且<spanclass="math inline">\(sF(s)\)</span>的所有极点在左半开平面，则<spanclass="math inline">\(f(t)\)</span>存在有界终值并且<spanclass="math inline">\(\lim_{t\rightarrow \infty} =\lim_{s\rightarrow0}sF(s)\)</span></p><blockquote><p>使用终值定理前应先判断是否满足使用条件</p></blockquote><p><strong>用途</strong>：计算稳态误差<spanclass="math inline">\(e_{ss}=\lim_{t\rightarrow \infty}e(t) =\lim_{s\rightarrow0}E(s)\)</span></p><p><strong>一个结论</strong>：在闭环控制系统中，若参考输入和干扰均为阶跃，控制器中的积分可使<spanclass="math inline">\(e_{ssr},e_{ssf}\)</span>和<spanclass="math inline">\(e_{ss}\)</span>均等于零</p><h3 id="单位负反馈系统型别">4.2.3 单位负反馈系统型别</h3><p>对于<strong>单位负反馈</strong>系统，系统的开环传递函数为<spanclass="math inline">\(G(s)=Y(s)/E(s)\)</span>，可整理为<spanclass="math inline">\(G(s)=\frac{K\beta(s)}{s^m\alpha(s)}\)</span>。<spanclass="math inline">\(m=0,1,2\)</span>对应“0”型系统、“1”型系统、“2”型系统</p><p><strong>单位负反馈</strong>系统中，若<spanclass="math inline">\(e_{ss}\)</span>存在，闭环系统稳定时，<spanclass="math inline">\(e_{ss}=\lim_{s\rightarrow0}sE(s)=\lim_{s\rightarrow0}\frac{s^{m+1}}{s^m+K}R(s)\)</span>，由此公式，可在<em>阶跃、斜坡、抛物线</em>等输入下对各型别系统进行分析。</p><ul><li><p>0型系统（<spanclass="math inline">\(m=0\)</span>）：<strong>能有差跟踪阶跃，不能跟踪斜坡和抛物线</strong></p><ul><li><p>阶跃：<spanclass="math inline">\(r(t)=R_0,R(s)={R_0}/{s}\)</span>，代入公式<spanclass="math inline">\(e_{ss}=\lim_{s\rightarrow0}\frac{s}{1+K_0}\frac{R_0}{s}=\frac{R_0}{1+K_0}\)</span></p></li><li><p>斜坡：<spanclass="math inline">\(r(t)=R_1t,R(s)=R_1/s^2\)</span>，<spanclass="math inline">\(\lim_{t\rightarrow\infty}e(t)=\infty\)</span>（此处终值定理不可用，下同）</p></li><li><p>抛物线：<spanclass="math inline">\(r(t)=0.5R_2t^2,R(s)=R_2/s^3\)</span>，<spanclass="math inline">\(\lim_{t\rightarrow\infty}e(t)=\infty\)</span></p></li></ul></li><li><p>1型系统（<spanclass="math inline">\(m=1\)</span>）：<strong>能无差跟踪阶跃，有差跟踪斜坡，不能跟踪抛物线</strong></p><ul><li><p>阶跃：<spanclass="math inline">\(r(t)=R_0,R(s)={R_0}/{s}\)</span>，代入公式<spanclass="math inline">\(e_{ss}=\lim_{s\rightarrow0}\frac{s^2}{s+K_1}\frac{R_0}{s}=0\)</span></p></li><li><p>斜坡：<spanclass="math inline">\(r(t)=R_1t,R(s)=R_1/s^2\)</span>，<spanclass="math inline">\(e_{ss}=\lim_{s\rightarrow0}\frac{s^2}{s+K_1}\frac{R_1}{s^2}=\frac{R_1}{K_1}\)</span></p></li><li><p>抛物线：<spanclass="math inline">\(r(t)=0.5R_2t^2,R(s)=R_2/s^3\)</span>，<spanclass="math inline">\(\lim_{t\rightarrow\infty}e(t)=\infty\)</span></p></li></ul></li><li><p>2型系统（<spanclass="math inline">\(m=2\)</span>）：<strong>能无差跟踪阶跃、斜坡，有差跟踪抛物线</strong></p><ul><li><p>阶跃：<spanclass="math inline">\(r(t)=R_0,R(s)={R_0}/{s}\)</span>，代入公式<spanclass="math inline">\(e_{ss}=\lim_{s\rightarrow0}\frac{s^3}{s^2+K_2}\frac{R_0}{s}=0\)</span></p></li><li><p>斜坡：<spanclass="math inline">\(r(t)=R_1t,R(s)=R_1/s^2\)</span>，<spanclass="math inline">\(e_{ss}=\lim_{s\rightarrow0}\frac{s^3}{s^2+K_2}\frac{R_1}{s^2}=0\)</span></p></li><li><p>抛物线：<spanclass="math inline">\(r(t)=0.5R_2t^2,R(s)=R_2/s^3\)</span>，<spanclass="math inline">\(e_{ss}=\lim_{s\rightarrow0}\frac{s^3}{s^2+K_2}\frac{R_2}{s^3}=\frac{R_2}{K_2}\)</span></p></li></ul></li></ul><p>误差系数：在<strong>给定的参考输入</strong>下，单位负反馈稳定控制系统稳态精度的一种度量。对于输入<spanclass="math inline">\(\frac{R_p}{s^{p+1}}\)</span>，若余差<spanclass="math inline">\(e_{ss}\)</span>为有界常数，误差系数为<spanclass="math inline">\(\frac{稳态输入的p阶微分}{e_{ss}}\)</span></p><p>误差系数与系统型别<strong>无关</strong>，根据<strong>输入</strong>的形式来定义，只针对稳定的<strong>单位负反馈系统</strong></p><ul><li><p>阶跃误差系数定义为：<spanclass="math inline">\(K_p=\frac{\lim_{t\rightarrow\infty}y(t)}{e_ss}\)</span>，仅适用于阶跃输入，计算式：<spanclass="math inline">\(K_p=\lim_{s\rightarrow0}G(s)\)</span></p></li><li><p>斜坡误差系数定义为：<spanclass="math inline">\(K_v=\frac{\lim_{t\rightarrow\infty}\frac{dy(t)}{dt}}{e_{ss}}\)</span>，仅适用于斜坡输入，计算式：<spanclass="math inline">\(K_v=\lim_{s\rightarrow0}sG(s)\)</span></p></li><li><p>抛物线误差系数定义为：<spanclass="math inline">\(K_a=\frac{\lim_{t\rightarrow\infty}\frac{d^2y(t)}{dt^2}}{e_{ss}}\)</span>，仅适用于抛物线输入，计算式：<spanclass="math inline">\(K_a=\lim_{s\rightarrow0}s^2G(s)\)</span></p></li></ul><p>主要需要记住下面的表格</p><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250529221905675.png" class="" title="系统型别与稳态误差"><p>注意：以上的阶跃、斜坡、抛物线输入均为典型输入，如果输入为形如<spanclass="math inline">\(r(t)=R_0+R_1t+\frac{R_2}{2}t^2\)</span>，需要使用叠加原理</p><p>结论：</p><ul><li><span class="math inline">\(m\)</span>型系统可以以零稳态误差跟踪具有<span class="math inline">\(t^{m−1}\)</span>及更低次形式的输入。</li><li><span class="math inline">\(m\)</span> 型系统可以跟踪具有 <spanclass="math inline">\(t^m\)</span> 形式的输入，但存在常数稳态误差。</li><li><span class="math inline">\(m\)</span> 型系统不能跟踪具有 <spanclass="math inline">\(t^{m+1}\)</span>及更高次形式的输入，因为稳态误差趋向于无穷值。</li></ul><p>对于<strong>非</strong>单位负反馈系统，可以转换为等价的单位负反馈系统，进行与上面相同的分析</p><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250529225040477.png" class="" title="非单位负反馈系统等价替换"><h1 id="第五章-根轨迹方法">第五章 根轨迹方法</h1><p><strong>控制系统的综合</strong>：根据期望的控制性能指标以及原系统模型，确定控制系统的结构、设计控制律及参数、选定控制元器件，以达到期望的性能指标。</p><h2 id="根轨迹概述">5.1 根轨迹概述</h2><ol type="1"><li><p>定义：当闭环系统某一参数（如开环根轨迹增益）变化时，闭环极点在S平面上变化的轨迹</p></li><li><p>作用：直观展示某个参数对全部闭环极点的影响，能够确定<strong>每个控制参数对应的闭环极点的位置</strong>。</p></li><li><p>闭环传递函数 与 开环传递函数<spanclass="math inline">\(G(s)H(s)\)</span>的关系</p></li></ol><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250530155512080.png" class="" title="方块图"><p><spanclass="math inline">\(\frac{C(s)}{R(s)}=\frac{G(s)}{1+G(s)H(s)}\)</span>，其中<spanclass="math inline">\(G(s)H(s)=K\frac{(s-z_1)(s-z_2)...(s-z_w)}{(s-p_1)(s-p_2)...(s-p_n)}\)</span>（n个极点，w个零点）</p><p>闭环特征方程：<spanclass="math inline">\(1+G(s)H(s)=(s-p_1)(s-p_2)...(s-p_n)+K(s-z_1)(s-z_2)...(s-z_w)=0\)</span></p><p>闭环传递函数<spanclass="math inline">\(\phi(s)=\frac{G(s)}{1+G(s)H(s)}\)</span></p><ul><li><p>若 <span class="math inline">\(n &gt;w\)</span>，闭环系统根轨迹增益等于开环系统前向通道根轨迹增益<spanclass="math inline">\(K_{1r}\)</span></p></li><li><p>闭环零点由开环前向通道传递函数<spanclass="math inline">\(G(s)\)</span>零点和反馈通道传递函数<spanclass="math inline">\(H(s)\)</span>极点组成</p></li><li><p>闭环极点与开环零、极点和根轨迹增益有关</p></li></ul><ol start="4" type="1"><li>任给一个点，判断该点在根轨迹上的方法：</li></ol><p>充要条件：<span class="math inline">\(s\inC\)</span>在根轨迹上，当且仅当<span class="math inline">\(\exist K \inR\)</span>满足<spanclass="math inline">\(1+G(s)H(s)=1+\frac{K(s-z_1)...(s-z_w)}{(s-p_1)...(s-p_n)}=0\)</span></p><p>上述方程存在复数，为方便求解，可以判断幅值条件和相角条件</p><p>加工原表达式，得到<spanclass="math inline">\(G(s)H(s)=\frac{K(s-z_1)...(s-z_w)}{(s-p_1)...(s-p_n)}=-1=e^{j(1+2h)\pi},h=0,\pm1,\pm2\)</span></p><p><strong>幅值条件：</strong><spanclass="math inline">\(|G(s)H(s)|=1\)</span>，可求出<spanclass="math inline">\(K\)</span></p><p><strong>相角条件：</strong> $$ (s-z_1)++(s-z_w)-(s-p_1)--(s-p_n)\{</p><span class="math display">\[\begin{aligned}&amp;=(2h+1)180^{\circ} \quad \text{若} K&gt;0 \\&amp;=h360^{\circ} \quad \text{若} K&lt;0\end{aligned}\]</span><p>. $$</p><blockquote><p>有时会说<span class="math inline">\(K&gt;0\)</span>时<spanclass="math inline">\(\angle G(s)H(s)=(1+2h)180^{\circ}\)</span>，<spanclass="math inline">\(K&lt;0\)</span>时<spanclass="math inline">\(\angle G(s)H(s)=h360^{\circ}\)</span>，这里的<spanclass="math inline">\(G(s)H(s)\)</span>不计入<spanclass="math inline">\(K\)</span>量的相角</p></blockquote><p>流程：首先确定s满足相角条件，再通过幅值条件求出<spanclass="math inline">\(K\)</span>。</p><h2 id="根轨迹绘制方法">5.2 根轨迹绘制方法</h2><h3 id="前提条件">5.2.1 前提条件</h3><ul><li><p>开环传递函数（零极点形式）：<spanclass="math inline">\(G(s)H(s)=K\frac{(s-z_1)(s-z_2)...(s-z_w)}{(s-p_1)(s-p_2)...(s-p_n)}\)</span>，零点数为<spanclass="math inline">\(w\)</span>，极点数为<spanclass="math inline">\(n\)</span></p></li><li><p>开环零点<span class="math inline">\(z_j\)</span>和开环极点<spanclass="math inline">\(p_i\)</span>已知，参数<spanclass="math inline">\(K\)</span>在<spanclass="math inline">\((0,+\infty)\)</span><em>或</em><spanclass="math inline">\((-\infty,0)\)</span>中变动</p></li><li><p>要求在s平面上绘制方程<spanclass="math inline">\((s-p_1)(s-p_2)...(s-p_n)+K(s-z_1)(s-z_2)...(s-z_w)=0\)</span>的根随<spanclass="math inline">\(K\)</span>变动的轨迹</p></li></ul><h3 id="绘制法则k0">5.2.2 绘制法则（<spanclass="math inline">\(K&gt;0\)</span>）</h3><ol type="1"><li>根轨迹的<strong>分支、对称性和连续性</strong></li></ol><ul><li>根轨迹的<strong>分支数</strong>等于开环零点数<spanclass="math inline">\(w\)</span>与开环极点数<spanclass="math inline">\(n\)</span>之大者 <spanclass="math inline">\(max(n,w)\)</span></li><li>根轨迹关于<strong>实轴</strong>对称（根为实数或共轭复数）</li><li>根轨迹的每个分支都是<strong>连续</strong>的曲线</li></ul><ol start="2" type="1"><li>根轨迹的<strong>起点（<spanclass="math inline">\(K=0\)</span>）和终点（<spanclass="math inline">\(K=+\infty\)</span>）</strong></li></ol><p>​根轨迹起始于开环极点（有限极点和无限极点），终止于开环零点（有限零点和无限零点）</p><ol start="3" type="1"><li>根轨迹的<strong>渐近线（<spanclass="math inline">\(n&gt;w\)</span>）</strong>：针对“无限”的终点</li></ol><p><span class="math inline">\(n&gt;w\)</span>下的渐近线条数： <spanclass="math inline">\(n-w\)</span>条 （<spanclass="math inline">\(n\)</span>个有限起点，<spanclass="math inline">\(w\)</span>个有限终点，<strong><spanclass="math inline">\(n-w\)</span>个无限终点</strong>，<spanclass="math inline">\(n\)</span>条根轨迹）</p><p>渐近线（射线）的计算方法：</p><ul><li><p>与实轴的夹角<spanclass="math inline">\(\gamma=\frac{(1+2k)180^{\circ}}{n-w},k\in\{0,1,...,n-w-1\}\)</span></p></li><li><p>与实轴的交点<spanclass="math inline">\(\sigma_0=\frac{\Sigma_{i=1}^np_i-\Sigma_{j=1}^{w}z_j}{n-w}\)</span></p></li></ul><ol start="4" type="1"><li><strong>实轴</strong>上的根轨迹</li></ol><ul><li><p>复数零点、复数极点以及点s<strong>左侧</strong>的实零点、实极点对相角条件（180的奇数倍）没有影响</p></li><li><p>实轴上的点s在根轨迹上，当且仅当s右侧<strong>实</strong>零点数与<strong>实</strong>极点数之和是<strong>奇数</strong></p></li></ul><ol start="5" type="1"><li>根轨迹的分离点和分离角</li></ol><p>a.<strong>分离点</strong>：两条或以上的根轨迹分支在s平面相遇又分开的点，这一点是特征方程的<strong>重根</strong>，有两种求解方法：</p><p>（1）方法一：</p><ul><li>分离点<span class="math inline">\(r\)</span>满足条件：<spanclass="math inline">\(\Sigma_{i=1}^n\frac{1}{r-p_i}=\Sigma_{j=1}^{w}\frac{1}{r-z_j},r\inC\)</span>，解方程可求分离点</li><li>无有限极点时：<spanclass="math inline">\(\Sigma_{j=1}^{w}\frac{1}{r-z_j}=0,r\inC\)</span>（极点一侧等于零）</li><li>无有限零点时：<span class="math inline">\(\Sigma_{i=1}^n\frac{1}{r-p_i}=0,r\in C\)</span>（零点一侧等于零）</li></ul><p>（2）方法二：令<span class="math inline">\(W(s) =\frac{\prod_{i=1}^{n} (s - p_i)}{\prod_{j=1}^{w} (s - z_j)} =-K\)</span>，<spanclass="math inline">\(\frac{d(-K)}{ds}|_{s=r}=\frac{dW(s)}{ds}|_{s=r}=0\)</span>，解方程可得分离点</p><p>更复杂情况：如果在根轨迹的给定点处<spanclass="math inline">\(w(s)\)</span>的<spanclass="math inline">\(y-1\)</span>阶导数为0，则有<spanclass="math inline">\(y\)</span>条根轨迹分支在该点相聚又分离</p><p>方法二可以确定有几条轨迹经过分离点，方法一只能求分离点</p><p>两个结论：</p><ul><li>两个极点/零点之间存在根轨迹，根轨迹上必有分离点</li><li>极点和零点之间如果存在分离点，至少有两个，如下图，分离点处K达到极大/极小值</li></ul><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250530222016961.png" class="" title="特殊分离点"><p>b.<strong>分离角</strong>：两条根轨迹分支由实轴外进入实分离点/离开实分离点进入实轴外 的轨线方向角</p><p>​ 公式：<spanclass="math inline">\(\frac{(2h+1)180^{\circ}}{l}\)</span>，其中<spanclass="math inline">\(l\)</span>表示有<spanclass="math inline">\(l\)</span>条根轨迹在该分离点分离，<spanclass="math inline">\(h\)</span>的范围可取<spanclass="math inline">\(0\)</span>到<spanclass="math inline">\(l-1\)</span>的整数</p><ol start="6" type="1"><li>出射角（起始角）及入射角（终止角）——根轨迹离开极点或到达零点的方向角</li></ol><ul><li>根轨迹离开<span class="math inline">\(q\)</span>重开环极点<spanclass="math inline">\(p_d\)</span>的出射角（起始角）</li></ul><p><span class="math display">\[\phi_{p_d} = \frac{(1 + 2k)180^{\circ} + \sum_{j=1}^{w} \angle(p_d -z_j) - \sum_{\substack{i=1 \\ p_i \neq p_d}}^{n} \angle(p_d - p_i)}{q}\quad k \in \{0, 1, \cdots, q-1\}\]</span></p><ul><li>根轨迹到达<span class="math inline">\(q\)</span>重开环零点<spanclass="math inline">\(z_d\)</span>的入射角（终止角）</li></ul><p><span class="math display">\[\psi_{z_d} = \frac{(1 + 2k)180^{\circ} + \sum_{i=1}^{n} \angle(z_d -p_i) - \sum_{\substack{j=1 \\ z_j \neq z_d}}^{w} \angle(z_d - z_j)}{q}\quad k \in \{0, 1, \cdots, q-1\}\]</span></p><blockquote><p>计算夹角可以使用计算器</p></blockquote><ol start="7" type="1"><li>根轨迹与虚轴的交点（产生无阻尼震荡/等幅震荡点）</li></ol><p>方法一：<spanclass="math inline">\(s=j\omega\)</span>代入特征方程<spanclass="math inline">\(1+G(s)H(s)=0\)</span>计算 <spanclass="math display">\[1 + G(j\omega)H(j\omega) = 0 \quad \Rightarrow \quad\begin{cases}\text{Re}[1 + G(j\omega)H(j\omega)] = 0 \\\text{Im}[1 + G(j\omega)H(j\omega)] = 0\end{cases}\]</span> 可求得根轨迹穿越虚轴时的参数<spanclass="math inline">\(K_c\)</span>，与根轨迹穿越虚轴的点<spanclass="math inline">\(s=\pm j\omega_c\)</span></p><p>方法二：劳斯判据全零行，求特征方程的根</p><ol start="8" type="1"><li>根轨迹的交叉点</li></ol><p>如果在根轨迹上的给定点处<span class="math inline">\(W(s)\)</span>的<span class="math inline">\(y-1\)</span> 阶导数等于零, 则有 <spanclass="math inline">\(y\)</span>条根轨迹分支在该点相聚又分离, 因此,在该点处根轨迹汇合。</p><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250530223913288.png" class="" title="交叉点"><ul><li><p>进入该点的两条相邻的根轨迹夹角设定为 <spanclass="math inline">\(λ_y\)</span>. <spanclass="math inline">\(\lambda_y=\pm\frac{360^{\circ}}{y}\)</span></p></li><li><p>离开该点的根轨迹分支与邻近的进入该点的根轨迹分支的夹角设定为<span class="math inline">\(θ_y\)</span>. <spanclass="math inline">\(\theta_y=\pm\frac{180^{\circ}}{y}\)</span></p></li></ul><ol start="9" type="1"><li>系统根之和的守恒（<spanclass="math inline">\(n-2&gt;=w\)</span>时）</li></ol><p><span class="math display">\[\sum_{j=1}^{n} p_j = \sum_{j=1}^{n} \lambda_j\]</span></p><p>对于<span class="math inline">\(w ≤n-2\)</span>的开环传递函数，当<spanclass="math inline">\(K\)</span>由<spanclass="math inline">\(0\)</span>变化到<spanclass="math inline">\(\infty\)</span>时,<strong>闭环特征方程的根之和</strong> 等于<strong>开环极点之和</strong></p><h3 id="步骤">5.2.3 步骤</h3><ol type="1"><li><p>找出开环极点<spanclass="math inline">\(p_i\)</span>和开环零点<spanclass="math inline">\(z_j\)</span>，确定根轨迹分支数</p></li><li><p>确定实轴上的根轨迹（s右侧实零点数与实极点数之和是<strong>奇数</strong>）</p></li><li><p>计算渐近线位置/夹角</p></li><li><p>计算分离点、分离角</p></li><li><p>计算出射角、入射角、根轨迹与虚轴的交点</p></li></ol><h3 id="有关根轨迹的几个结论">5.2.4 有关根轨迹的几个结论：</h3><ul><li>具有相同阻尼比的特征根<span class="math inline">\(-\zeta\omega_n \pmj\omega_n\sqrt{1-\zeta^2}\)</span>位于一条直线上，这条直线与负实轴的<strong>夹角</strong>满足<spanclass="math inline">\(\eta=\cos^{-1}\zeta\)</span>（夹角余弦值=阻尼比），特征根到原点的距离（线段长度）为<spanclass="math inline">\(\omega_n\)</span></li></ul><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250530160655483.png" class="" title="阻尼比与极点位置的关系图"><ul><li><p>给系统增加合适的开环零点：根轨迹向左弯曲,系统更加稳定，过渡过程加快（稳态时间<spanclass="math inline">\(t_s\)</span>减少）</p><p>给系统增加合适的开环极点：根轨迹向右弯曲，容易使系统不稳定，过渡过程变缓</p></li></ul><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250530231308193.png" class="" title="向左弯曲"><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250530231318306.png" class="" title="向右弯曲"><ul><li>由<strong>两个开环极点</strong>（实极点或复数极点）和<strong>一个开环实零点</strong>组成的二阶系统，只要<strong>实零点没有位于两个实极点之间</strong>，当开环根轨迹增益由零变到无穷大时，复平面上的闭环根轨迹，一定是以<strong>实零点为圆心</strong>，以<strong>实零点到分离点的距离</strong>为半径的一个圆（当开环极点为两个实极点时）或圆的一部分（当开环极点为一对共轭复数极点时）。</li></ul><h2 id="广义根轨迹">5.3 广义根轨迹</h2><p>广义根轨迹有三种：参数根轨迹、正反馈系统根轨迹、纯滞后系统根轨迹</p><h3 id="参数根轨迹">5.3.1 参数根轨迹</h3><p>定义：闭环系统特征方程的根是其他参数（非根轨迹增益）的函数，例如：<span class="math display">\[G(s)H(s)=\frac{2}{s(Ts+1)(s+1)}\]</span> 分析方法：根据<spanclass="math inline">\(1+G(s)H(s)=0\)</span>，整理成等效单位反馈系统的等效开环传递函数<spanclass="math inline">\([G(s)H(s)]_e=A\frac{P(s)}{Q(s)}=-1\)</span>，使关注的参数成为根轨迹增益</p><p>注意：这里的“等效”仅是闭环<strong>极点</strong>与实际的传递函数相同</p><p>通常, 当极点数<span class="math inline">\(n\)</span>小于零点数<spanclass="math inline">\(w\)</span>时,可以用<spanclass="math inline">\(1/T\)</span>（根轨迹增益的倒数）作为绘制根轨迹时的变化参数。</p><h3 id="正反馈根轨迹">5.3.2 正反馈根轨迹</h3><ol type="1"><li>类型：</li></ol><ul><li><p>如果系统是正反馈系统，特征方程为<spanclass="math inline">\(1-G(s)H(s)=0\)</span>，此时的根轨迹为正反馈根轨迹</p></li><li><p>系统是负反馈系统，特征方程为<spanclass="math inline">\(1+G(s)H(s)=0\)</span>，但<spanclass="math inline">\(K&lt;0\)</span>，根轨迹为正反馈根轨迹</p></li></ul><p>与负反馈系统相比，相角条件有所改变：<spanclass="math inline">\(\angleG(s)H(s)=0^{\circ}+k360^{\circ}\)</span>，因此正反馈根轨迹被称为<spanclass="math inline">\(0^{\circ}\)</span>根轨迹或付参数根轨迹</p><ol start="2" type="1"><li>绘制法则</li></ol><p>相比于负反馈根轨迹，绘制法则有三点不同：</p><p>（1）渐近线：与实轴的交点不变；与实轴的夹角变为<spanclass="math inline">\(\gamma=\frac{2k\pi}{n-w}\)</span>（<spanclass="math inline">\(n&gt;w\)</span>）</p><p>（2）实轴上的根轨迹：s右侧的实数零极点数是偶数个，则该点在根轨迹上</p><p>（3）出射角与入射角</p><p>出射角： <span class="math display">\[\phi_{p_d} = \frac{2k\pi + \sum_{j=1}^{w} \angle(p_d - z_j) -\sum_{\substack{i=1 \\ p_i \neq p_d}}^{n} \angle(p_d - p_i)}{q} \quad k\in \{0, 1, \cdots, q-1\}\]</span> 入射角： <span class="math display">\[\psi_{z_d} = \frac{2k\pi + \sum_{i=1}^{n} \angle(z_d - p_i) -\sum_{\substack{j=1 \\ z_j \neq z_d}}^{w} \angle(z_d - z_j)}{q} \quad k\in \{0, 1, \cdots, q-1\}\]</span></p><h3 id="纯滞后系统根轨迹">5.3.3 纯滞后系统根轨迹</h3><p>典型形式：<spanclass="math inline">\(G(s)H(s)=K\frac{A(s)}{B(s)}e^{-\taus}\)</span>，特征方程 <span class="math inline">\(1+G_1(s)H_1(s)e^{-\taus}=0\)</span></p><p>通过幅值条件和相角条件，可近似勾勒出根轨迹</p><p>Pade近似：<span class="math inline">\(e^{-\taus}=-\frac{s-\frac{2}{\tau}}{s+\frac{2}{\tau}}\)</span></p><h2 id="基于根轨迹的系统性能分析">5.4 基于根轨迹的系统性能分析</h2><ul><li>主导极点特征：1.附近无其他零极点2.距虚轴较近(实部绝对值小于其它极点实部绝对值的1/5)</li><li>主导根轨迹分支：根轨迹中最接近于虚轴的1或2条根轨迹分支</li></ul><p>系统性能分析时主要考虑主导极点。</p><p>核心步骤:</p><ol type="1"><li>根据要求的动态性能指标：调节时间<spanclass="math inline">\(t_s\)</span>，超调量<spanclass="math inline">\(\sigma\)</span>%，上升时间<spanclass="math inline">\(t_r\)</span>，峰值时间<spanclass="math inline">\(t_p\)</span></li><li>通过公式计算阻尼比<spanclass="math inline">\(\zeta\)</span>，自然频率<spanclass="math inline">\(\omega_n\)</span>，振荡频率<spanclass="math inline">\(\omega_d\)</span>.....</li><li>在主导根轨迹分支上选择合适的主导极点（例如已知阻尼比，可以使用结论：夹角余弦值=阻尼比）</li><li>根据主导极点求根轨迹增益<spanclass="math inline">\(K\)</span>，同时可确定其他根（可以直接求，也可以用法则9【<spanclass="math inline">\(n-2\geqw\)</span>时开环极点之和=闭环特征根之和】求解）</li></ol><h2 id="系统补偿器设计">5.5 系统补偿器设计</h2><p>补偿器设计方式：串联补偿、反馈补偿、局部反馈补偿</p><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250531111250471.png" class="" title="串联补偿"><p>常见结构对瞬态相应和稳态响应的影响</p><img src="/2025/05/26/%E3%80%8A%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20250531111343534.png" class="" title="补偿器影响"><p>零点的幅值小于极点的幅值时，称为超前（lead）控制器.。否则，称为滞后（lag）控制器</p><h1 id="第六章-频率特性分析法">第六章 频率特性分析法</h1><h2 id="概述">6.1 概述</h2><p>正弦输入下LTI系统的全响应、自由响应和强迫响应：</p><p>某典型输入<spanclass="math inline">\(u(t)\)</span>和一个LTI系统满足下列2个<strong>模态不重叠条件</strong>之一：</p><ul><li><p><span class="math inline">\(u(t)=A_1\sin(\omega_0 t) \cdotu_{-1}(t)\)</span> ，<span class="math inline">\(G(s)\)</span>不含<spanclass="math inline">\(\frac{1}{s^2 + \omega_0^2}\)</span></p></li><li><p><spanclass="math inline">\(u(t)\)</span>为阶跃、斜坡或抛物线输入，<spanclass="math inline">\(G(s)\)</span>不含<spanclass="math inline">\(\frac{1}{s}\)</span></p></li></ul><p>任给初始条件，对<span class="math inline">\(G(s)\)</span>输入<spanclass="math inline">\(u(t)\)</span>，可得到相应的全响应<spanclass="math inline">\(y(t)\)</span>，则<spanclass="math inline">\(y(t)=y_{tr}(t)+y_{ss}(t)\)</span></p><p>自由响应<span class="math inline">\(y_{tr}(t)\)</span>：<spanclass="math inline">\(y(t)\)</span>中由<spanclass="math inline">\(G(s)\)</span>模态组成的部分</p><p>强迫响应<span class="math inline">\(y_{ss}(t)\)</span>：<spanclass="math inline">\(y(t)\)</span>中由非<spanclass="math inline">\(G(s)\)</span>模态组成的部分</p><p>输入正弦信号，输出可由公式计算</p><figure><img src="《自动控制原理》复习笔记/image-20250605100314216.png"alt="image-20250605100314216" /><figcaption aria-hidden="true">image-20250605100314216</figcaption></figure><p>系统幅频特性<spanclass="math inline">\(M(\omega)\)</span>，相频特性<spanclass="math inline">\(\phi(\omega)\)</span>，复数值函数<spanclass="math inline">\(M(\omega)e^{j\phi(\omega)}\)</span>称系统的频率特性</p><p>分析法得到频率特性<spanclass="math inline">\(M(\omega)e^{j\phi(\omega)}=G(j\omega)=G(s)|_{s=j\omega}\)</span></p><p>最终的公式：<spanclass="math inline">\(\frac{A_2}{A_1}=|G(j\omega)|,\phi(\omega)=\angleG(j\omega)\)</span>（这里指的强迫响应，强迫响应为同频率的正弦信号，幅值增大<spanclass="math inline">\(|G(j\omega)|\)</span>，相位滞后<spanclass="math inline">\(\angle G(j\omega)\)</span>）</p><p>频率特性曲线：Bode图（对数频率特性曲线）、Nyquist图（极坐标图、幅相曲线）</p><h2 id="bode图">6.2 Bode图</h2><h3 id="概述-1">6.2.1 概述</h3><p>对数幅频：传递函数<spanclass="math inline">\(G(j\omega)\)</span>的幅值的对数（幅频特性）</p><p>​ 纵坐标：以分贝来表示：<span class="math inline">\(LmG(j\omega) =20\lg|G(j\omega)|\)</span> dB</p><p>​ 横坐标：按<spanclass="math inline">\(\lg\omega\)</span>分度，单位为<spanclass="math inline">\(rad/s\)</span></p><p>对数相频：纵坐标：按<span class="math inline">\(\phi(\omega)=\angleG(j\omega)\)</span>线性分度，单位为度（deg/<spanclass="math inline">\(^\circ\)</span>)</p><figure><img src="《自动控制原理》复习笔记/image-20250605104507382.png"alt="image-20250605104507382" /><figcaption aria-hidden="true">image-20250605104507382</figcaption></figure><h3 id="各形式传递函数对应的bode图">6.2.2各形式传递函数对应的Bode图</h3><ol type="1"><li>比例环节<span class="math inline">\(G(s)=K\)</span></li></ol><ul><li><span class="math inline">\(K&gt;0\)</span></li></ul><p>对数幅频：<span class="math inline">\(LmG(j\omega) = 20\lgK\)</span>，一条水平线；相频恒为0</p><table><thead><tr><th></th><th>(</th></tr></thead><tbody></tbody></table><p>(use table to achieve the performance of two pictures are side byside)</p><ul><li><span class="math inline">\(K&lt;0\)</span></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加密通信的设计与实现</title>
    <link href="/2024/12/15/%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/12/15/%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="加密通信的设计与实现">加密通信的设计与实现</h1><p>1.双方通信时，信息的保密是十分重要的，请编写代码（语言不限）实现Alice与Bob之间的加密通信，至少使用一种非对称加密算法，主要包括发送数据与接收数据的过程，具体有以下要求：</p><ul><li>Alice发送给Bob一条信息message，但通讯信道可能被中间人Charlie窃听，你实现的通信需要保证message只有Alice与Bob知道明文内容，Charlie即使窃取到了信息也无法知道明文内容。</li><li>Charlie窃取信息后可能发送伪造的信息给Bob，你需要保证Bob收到信息后能判断该信息是否是Alice发送过来的。</li><li>尽可能快的实现通信，尽量减少加解密过程所花费的时间，需要多种加密结合。</li></ul><p>基本思路：</p><ul><li>只有Alice和Bob知道明文内容：采用非对称加密，Alice用Bob的公钥加密信息，只有Bob能用私钥解密信息</li><li>判断信息是Alice发送来的：Alice使用数字签名</li><li>尽可能快的实现通信：用对称加密来加密明文，再用非对称加密来加密对称加密的密钥（因为非对称加密对于长文本往往更慢）</li></ul><p>对称加密：chacha20</p><p>非对称加密：RSA</p><p>流程：</p><ul><li>正常通讯：Alice使用chacha20加密明文，使用Bob的公钥加密密钥，生成nonce，根据密钥、明文、nonce生成hmac（确保完整性），用自己的私钥对消息和nonce的组合进行签名。Bob接收信息后，用私钥解密出密钥，用密钥解密出明文，再根据密钥、明文、nonce生成hmac检查是否被篡改，最后用alice的公钥验证签名</li><li>存在中间人窃听：Alice的信息被Charlie窃听，Charlie按照Alice的流程发送新的信息给Bob，但是没有Alice的数字签名。Bob收到信息后经验证发现消息并不是由Alice发出的。</li></ul><p>验证通讯的安全性：</p><p>原代码中，RSA原本为2048位的密钥，而2048位目前认为是不可破解的</p><p>尝试改为1024位（更低的位数代码不允许），暴力破解时间还是过长</p><p>直接编写代码暴力破解RSA</p><table><thead><tr><th>长度</th><th>时间</th></tr></thead><tbody><tr><td>32</td><td>0.01</td></tr><tr><td>36</td><td>0.02</td></tr><tr><td>48</td><td>0.5</td></tr><tr><td>56</td><td>10.78</td></tr><tr><td>60</td><td>29.71</td></tr><tr><td>62</td><td>99.10</td></tr><tr><td>64</td><td>286.36</td></tr><tr><td>68</td><td>??</td></tr></tbody></table><p><span class="math inline">\(y=0.0000*e^{0.5378x}\)</span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>电梯逻辑笔记</title>
    <link href="/2024/12/10/%E7%94%B5%E6%A2%AF%E9%80%BB%E8%BE%91%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/12/10/%E7%94%B5%E6%A2%AF%E9%80%BB%E8%BE%91%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>寒假整理......</p>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>西门子杯</tag>
      
      <tag>PLC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRTP相关</title>
    <link href="/2024/12/09/SRTP%E7%9B%B8%E5%85%B3/"/>
    <url>/2024/12/09/SRTP%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>进度跟进用，星期五前完成记录</p>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DCS学习</title>
    <link href="/2024/12/09/DCS%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/12/09/DCS%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>预期内容为：</p><ul><li>hollysys使用方法：包括状态切换、变量读写等</li><li>协议分析、上位机软件分析方法</li><li>x86汇编、IDA、ollydebug</li><li>进程监督工具 process monitor</li></ul><h1 id="一dcs基础">一、DCS基础</h1><h2 id="概念">1.概念</h2><ol type="1"><li><p>DCS 集散控制系统：分散控制、集中操作、综合管理、分而治之</p></li><li><p>分层体系：直接控制层（PLC、DCS）-&gt;操作监控层-&gt;生产管基层-&gt;决策管理层</p></li><li><p>硬件结构：积木式，控制站、操作员站、工程师站</p><p>控制站：控制器（DPU，运行控制逻辑）+IO模块（信息传递）</p><ol type="1"><li>控制周期：250ms或500ms，最短控制周期有主芯片速度、程序量和通讯量等决定，负荷率不超过40%，最高应小于70%</li><li>DI/DO/AI/AO/TC/RTD/AO等输入输出单元</li><li>SOE模块：带时间标志的DI信号，主要用于事故分析，可以达到毫秒级的分辨率</li></ol><p>操作员站：工艺操作员对生产过程进行监视、操作和管理</p><p>工程师站：</p></li><li><p>组态软件</p><p>硬件组态：控制器插的卡和实际的对应上</p><p>软件组态：</p><ol type="1"><li>画面组态：画操作员看的画面</li><li>逻辑组态：FBD、ST等</li></ol><p>SAMA图：控制逻辑</p><p>查看趋势、报警</p><p>OPC技术：软件与软件之间通讯</p></li><li><p>可靠性：MTTF等</p></li><li><p>接地：屏蔽地、保护地、操作员站保护地接到一起</p></li><li><p>冗余：硬件冗余、软件冗余、信息冗余、时间冗余，模块冗余，保持可靠性，无扰动切换</p><p>控制器冗余：一段中，两个控制器同时运行，一个主一个从</p><p>通信冗余：总线通信线路冗余</p><p>电源冗余：两路供电，双输入电源模块</p></li></ol><h1 id="二st语言">二、ST语言</h1><ol type="1"><li><p>表达式：操作符+操作数</p><p>操作符：<code>+</code> <code>-</code> <code>*</code> <code>/</code><code>MOD（取余）</code> <code>&lt;</code> <code>&gt;</code><code>&lt;=</code> <code>&gt;=</code> <code>&lt;&gt;（不等于）</code><code>NOT（取反）</code> <code>AND（相与）</code><code>XOR（相异或）</code> <code>OR（或）</code> <code>:=（赋值）</code><code>^(取内容，针对指针)</code> <code>-（取负数）</code><code>() 括号，更改运算次序</code> <code>FUNCTION  函数调用</code></p><p>优先级（从高到低，同级从左往右）：括号，功能或功能块调用，取内容（^)，取负数/取反，乘除取余，加减，比较，等于/不等于，位与，位异或，位或，赋值</p></li><li><p>功能块FB（function block） 、函数FNC 、程序段PRG</p></li></ol><h2 id="三modbus">三、MODBUS</h2><p>一种串行通讯协议。</p><p>主从方式通信，总线上每次只有一个数据传输，主机发送，从机应答</p><p>寄存器：</p><figure><img src="DCS学习/image-20250116084912051.png"alt="image-20250116084912051" /><figcaption aria-hidden="true">image-20250116084912051</figcaption></figure><p>地址分配：</p><figure><img src="DCS学习/image-20250116085015888.png"alt="image-20250116085015888" /><figcaption aria-hidden="true">image-20250116085015888</figcaption></figure><p>modbus帧结构：地址+功能码+数据+校验位</p><p>地址：一个字节 0-255，有效范围1-247；</p><p>功能码：一个字节</p><figure><img src="DCS学习/image-20250116084508965.png"alt="image-20250116084508965" /><figcaption aria-hidden="true">image-20250116084508965</figcaption></figure><p>数据：起始地址（高八位+低八位） 数量（高八位+低八位）</p><p>校验码：用于校验信息传输过程是否出错</p><p>例子：0x03 0x01 0x00 0x13 0x00 0x1B XX XX</p>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启真问学</tag>
      
      <tag>DCS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学学习笔记</title>
    <link href="/2024/12/09/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/12/09/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>督促自己学习，持续更新...</p>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启真问学</tag>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人正逆运动学</title>
    <link href="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/"/>
    <url>/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>课程链接：<ahref="https://www.bilibili.com/video/BV1v4411H7ez?p">台大机器人学之运动学——林沛群</a></p><h1 id="导论">1.导论</h1><h2 id="导论-1">1-1 导论</h2><ol type="1"><li>一个刚体状态的描述：<ul><li>平面：2个移动自由度（xy）、1个转动自由度</li><li>空间：3个移动自由度（xyz）、3个转动自由度（分别绕xyz）</li></ul></li><li>整合表示</li><li><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/1.png" class="" title="world frame and body frame"></li></ol><p>​ 刚体上建立坐标系——body frame</p><p>​ 移动：body frame原点位置 、 转动：body frame坐标轴位置</p><ol start="3" type="1"><li>运动描述</li></ol><p>​ 各个DOF的微分——（角）速度、（角）加速度</p><h2 id="移动">1-2 移动</h2><p>以向量<spanclass="math inline">\(\vec{P}\)</span>来描述B的原点相对于A的状态</p><p>​ <span class="math inline">\(\vec{P}=[P_x,P_y,P_z]=^AP_{B \org}\)</span>=B相对A移动的向量</p><h2 id="转动">1-3 转动</h2><p>body frame的三个主轴向量<span class="math inline">\(^AX_B/^AY_B/^AZ_B\)</span>(B相对于A) <span class="math display">\[^A_BR=[\hat{^AX_B} ,\hat{^AY_B},\hat{^AZ_B}]\\=\left[ \begin{matrix}\hat{X_B} \cdot \hat{X_A}&amp;\hat{Y_B} \cdot \hat{X_A}&amp;\hat{Z_B}\cdot \hat{X_A}\\\hat{X_B} \cdot \hat{Y_A}&amp;\hat{Y_B} \cdot \hat{Y_A}&amp;\hat{Z_B}\cdot \hat{Y_A}\\\hat{X_B} \cdot \hat{Z_A}&amp;\hat{Y_B} \cdot \hat{Z_A}&amp;\hat{Z_B}\cdot \hat{Z_A}\end{matrix}\right]\]</span> (以投影方式表示，Bodyframe的三个向量往世界坐标系的三个轴分别投影)</p><h2 id="旋转矩阵">1-4 旋转矩阵</h2><p>A--world frame, B--body frame</p><ol type="1"><li>A相对于B=B相对于A的转置</li></ol><p><span class="math display">\[^A_BR=[\hat{^AX_B} ,\hat{^AY_B},\hat{^AZ_B}]\\=\left[ \begin{matrix}\hat{X_B} \cdot \hat{X_A}&amp;\hat{Y_B} \cdot \hat{X_A}&amp;\hat{Z_B}\cdot \hat{X_A}\\\hat{X_B} \cdot \hat{Y_A}&amp;\hat{Y_B} \cdot \hat{Y_A}&amp;\hat{Z_B}\cdot \hat{Y_A}\\\hat{X_B} \cdot \hat{Z_A}&amp;\hat{Y_B} \cdot \hat{Z_A}&amp;\hat{Z_B}\cdot \hat{Z_A}\end{matrix}\right]\\=\left[ \begin{matrix}\hat{X_A} \cdot \hat{X_B}&amp;\hat{Y_A} \cdot \hat{X_B}&amp;\hat{Z_A}\cdot \hat{X_B}\\\hat{X_A} \cdot \hat{Y_B}&amp;\hat{Y_A} \cdot \hat{Y_B}&amp;\hat{Z_A}\cdot \hat{Y_B}\\\hat{X_A} \cdot \hat{Z_B}&amp;\hat{Y_A} \cdot \hat{Z_B}&amp;\hat{Z_A}\cdot \hat{Z_B}\end{matrix}\right]\\=\left[ \begin{matrix}\hat{^BX_A}\\\hat{^BY_A}\\\hat{^BZ_A}\end{matrix}\right]=^B_AR^T\]</span></p><ol start="2" type="1"><li><span class="math inline">\(^A_BR^T \ ^A_BR=E_3\)</span></li></ol><p>​ <span class="math inline">\(^A_BR^T=^A_BR^{-1}\)</span>用于计算旋转矩阵的逆矩阵</p><p>​ （旋转矩阵是正交矩阵，<spanclass="math inline">\(QQ^T=Q^TQ=I,Q^{-1}=Q^T\)</span>）</p><ol start="3" type="1"><li>坐标系之间的坐标变换：<span class="math inline">\(^AP=^A_BR\ \^BP\)</span></li></ol><p>​ P在A坐标系的坐标=P在B坐标系的坐标 左乘 B相对于A的旋转矩阵</p><ol start="4" type="1"><li>描述转动状态</li></ol><ul><li><p>绕<span class="math inline">\(z\)</span>轴逆时针旋转<spanclass="math inline">\(\theta\)</span>角<spanclass="math inline">\(R_{Z_A}(\theta)=\left[\begin{matrix}c\theta&amp;-s\theta&amp;0\\s\theta&amp;c\theta&amp;0\\0&amp;0&amp;1\\\end{matrix}\right]\)</span></p></li><li><p>绕<span class="math inline">\(x\)</span>轴逆时针旋转<spanclass="math inline">\(\theta\)</span>角<spanclass="math inline">\(R_{X_A}(\theta)=\left[\begin{matrix}1&amp;0&amp;0\\0&amp;c\theta&amp;-s\theta\\0&amp;s\theta&amp;c\theta\\\end{matrix}\right]\)</span></p></li><li><p>绕<span class="math inline">\(y\)</span>轴逆时针旋转<spanclass="math inline">\(\theta\)</span>角<spanclass="math inline">\(R_{Y_A}(\theta)=\left[\begin{matrix}c\theta&amp;0&amp;s\theta\\0&amp;1&amp;0\\-s\theta&amp;0&amp;c\theta\\\end{matrix}\right]\)</span></p></li></ul><h1 id="旋转矩阵-1">2.旋转矩阵</h1><h2 id="旋转矩阵与转角">2-1 旋转矩阵与转角</h2><ol type="1"><li>旋转顺序不可互换，多次旋转的先后顺序需要明确定义，旋转转轴也需要明确定义</li><li>拆解方式</li></ol><ul><li>空间中固定轴xyz：Fixed angles</li><li>转动物体上的坐标系:Euler angles</li></ul><h2 id="fixed-angles">2-2 Fixed angles</h2><ol type="1"><li><p><spanclass="math inline">\(X_A,Y_A,Z_A\)</span>固定不动，转动<spanclass="math inline">\(X_B,Y_B,Z_B\)</span>。转动针对<spanclass="math inline">\(X_A,Y_A,Z_A\)</span>（针对A坐标系转）</p></li><li><p>公式：<spanclass="math inline">\(^A_BR_{XYZ}(\gamma,\beta,\alpha)=R_Z(\alpha)R_Y(\beta)R_X(\gamma)\)</span></p></li></ol><p>​先转的在后面，后转的在前面，相当于按顺序一个一个左乘（绕固定轴情况下）。</p><ol start="3" type="1"><li>反推：从已知旋转矩阵 推 绕XYZ的旋转矩阵</li></ol><p><span class="math display">\[^A_BR_{XYZ}(\gamma,\beta,\alpha)=\left[\begin{matrix}c\alpha c\beta&amp;c\alpha s\beta s\gamma - s\alpha c\gamma&amp;c\alphas\beta c\gamma+s\alpha s\gamma\\s\alpha c\beta&amp;s\alpha s\beta s\gamma + c \alpha c\gamma&amp;s\alpha s\beta c \gamma-c \alpha s \gamma\\-s \beta&amp;c\beta s\gamma&amp;c\beta c\gamma\end{matrix}\right]=\left[\begin{matrix}r_{11}&amp;r_{12}&amp;r_{13}\\r_{21}&amp;r_{22}&amp;r_{23}\\r_{31}&amp;r_{32}&amp;r_{33}\end{matrix}\right]\]</span></p><p><span class="math display">\[if \beta \neq 90°\\\beta=Atan2(-r_{31},\sqrt{r_{11}^2+r_{21}^2})\\\alpha=Atan2(r_{21}/c\beta,r_11/c\beta)\ \ \ \ \ \ \ -90\leq\beta\leq90\\\gamma=Atan2(r_{32}/c\beta,r_{33}/c\beta)\]</span></p><p>atan2对象限敏感，<spanclass="math inline">\(atan2(y,x)=atan(y/x)\)</span>，第三四象限结果+π<span class="math display">\[if \beta=90°,\alpha=0°,\gamma=Atan2(r_{12},r_{22})\\if \beta=-90°,\alpha=0°,\gamma=-Atan2(r_{12},r_{22})\]</span> 以上公式求得的结果，旋转顺序为XYZ</p><h2 id="euler-angles欧拉角">2-3 Euler angles(欧拉角)</h2><ul><li>顺序 ： ZYX</li><li>针对被转动的系统转轴作旋转（即对B坐标系转）</li></ul><ol type="1"><li>表达式：<spanclass="math inline">\(^A_BR_{Z&#39;Y&#39;X&#39;}(\alpha,\beta,\gamma)=R_{Z&#39;}(\alpha)R_{Y&#39;}(\beta)R_{X&#39;}(\gamma)\)</span>(按顺序右乘)</li></ol><p><span class="math display">\[=\left[\begin{matrix}c\alpha&amp;-s\alpha&amp;0\\s\alpha&amp;c\alpha&amp;0\\0&amp;0&amp;1\\\end{matrix}\right]\left[\begin{matrix}c\beta&amp;0&amp;s\beta\\0&amp;1&amp;0\\-s\beta&amp;0&amp;c\beta\\\end{matrix}\right]\left[\begin{matrix}1&amp;0&amp;0\\0&amp;c\gamma&amp;-s\gamma\\0&amp;s\gamma&amp;c\gamma\\\end{matrix}\right]\]</span></p><p>结果与Fixed angle的按XYZ顺序转相同。</p><ol start="2" type="1"><li>ZYZ型-Euler angle：由角度推算旋转矩阵</li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/2.png" class="" title="ZYZ"><p>​ 由旋转矩阵推算角度</p><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/3.png" class="" title="ZYZ2"><ol start="3" type="1"><li>固定角和欧拉角：种类数都是3*2*2=12种排列组合（转轴与上次不同即可），存在12种拆解方式</li><li>其他表示法</li></ol><ul><li>Angle-axis表达法——绕<spanclass="math inline">\(\vec{k}\)</span>旋转<spanclass="math inline">\(\theta\)</span></li></ul><p>​ <spanclass="math inline">\(\vec{k}\)</span>是单位向量，有两个变数（自由度）（单位向量知二推一）；同时<spanclass="math inline">\(\theta\)</span>是另一个自由度；一共三个自由度</p><ul><li>Quaternion表达法（四元数）</li></ul><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/4.png" class="" title="四元数"><h2 id="mapping">2-4 Mapping</h2><ol type="1"><li>移动与转动合并到同一矩阵：齐次变换矩阵</li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/5.png" class="" title="齐次变换矩阵"><ol start="2" type="1"><li>可连续操作：<spanclass="math inline">\(^A_BT=^A_CT^C_DT^D_BT\)</span></li></ol><h2 id="operators">2-5 Operators</h2><ol type="1"><li>将向量移动或转动，相对于原坐标系，移动或转动后的坐标点坐标计算如下</li></ol><ul><li>先转动后移动</li></ul><p><span class="math display">\[\begin{bmatrix}^AP_2\\1\end{bmatrix}=\begin{bmatrix}R_{\hat{K}}&amp;&amp;&amp;^AQ\\0&amp;0&amp;0&amp;1\end{bmatrix}\begin{bmatrix}^AP_1\\1\end{bmatrix}=\begin{bmatrix}R_{\hat{K}}(\theta)^AP_1+^AQ\\1\end{bmatrix}=T\begin{bmatrix}A^P_1\\1\end{bmatrix}\]</span></p><ul><li>先移动后转动：移动向量<spanclass="math inline">\(^AQ\)</span>也会随旋转矩阵转动，移动向量改变</li></ul><ol start="2" type="1"><li>运动是相对的：可以反方向动原坐标系，例如点逆时针转30°=原坐标系顺时针转30°（移动同理）</li></ol><p>总结：</p><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/6.png" class="" title="总结"><h2 id="运算">2-6 运算</h2><ol type="1"><li>连续运算：<spanclass="math inline">\(^AP=^A_BT^BP=^A_BT^B_CT^CP\)</span></li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/7.png" class="" title="连续运算"><p>旋转矩阵相乘，移动向量全部转化到A坐标系后再相加减</p><ol start="2" type="1"><li>反矩阵：<span class="math inline">\(^B_AT=^A_BT^{-1}=I\)</span></li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/8.png" class="" title="反矩阵"><ol start="3" type="1"><li>连续运算——环状</li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/9.png" class="" title="连续运算2"><p>可利用反矩阵和线性连续运算，知n推一</p><ol start="4" type="1"><li>连续运算法则</li></ol><ul><li>B与A相同：<span class="math inline">\(^A_BT=I\)</span></li><li>B对A的转轴旋转（Fixed angle）：左乘，先转的放后面，<spanclass="math inline">\(^A_BT=T_3T_2T_1\)</span></li><li>B对A自身的转轴旋转（Euler angle）：右乘，先转的放前面，<spanclass="math inline">\(^A_BT=T_1T_2T_3\)</span></li></ul><h1 id="正运动学">3.正运动学</h1><h2 id="顺向运动学正运动学">3-1 顺向运动学(正运动学)</h2><ol type="1"><li>运动学：讨论运动状态本身，不讨论产生运动的力。讨论<spanclass="math inline">\(s,x,v,a\)</span>等的关系</li></ol><p>​ 动力学：讨论力/力矩如何产生运动</p><ol start="2" type="1"><li><p>机械手臂：多个焊件相串联，具有复杂的几何外形。杆件间可相对<strong>移动</strong>或<strong>转动</strong>。</p></li><li><p>对应关系：需求——手臂末端点状态；达成方式：驱动各致动器（关节）<spanclass="math inline">\(w_P=f(\theta_1,\theta_2......)\)</span></p></li><li><p>正运动学：已知<spanclass="math inline">\(\theta\)</span>求出P，在每个杆件上建立frame。</p></li></ol><h2 id="手臂几何描述">3-2 手臂几何描述</h2><ol type="1"><li><p>关节：1个自由度DOF（朝特定方向转/移动）</p></li><li><p>杆件：是刚体，不会变形，姿态改变由转轴上的自由度改变引起。</p></li></ol><p>​杆件的从下到上的编号方式：Link0:地杆，Link1：和link0相连的第一个可动杆件，Link2：第二个可动杆件......</p><p>​ 第i-1个转轴对应i-1号杆件</p><ol start="3" type="1"><li>空间中任意方向的两个转轴axes，两转轴之间具有一个线段与这两个转轴都相互垂直，定义为杆件i-1的长度（长度是唯一的，如绿色虚线所示）。</li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/10.png" class="" title="两杆串联"><p>​ 橙色为两个转轴之间相差的角度Link twist。用这两个参数(<spanclass="math inline">\(\alpha_i,a_i\)</span>)描述杆件上两个转轴间的关系</p><p>​ 若多杆串联，需增加参数<spanclass="math inline">\(d_i,\theta_i\)</span>（是相对几何关系）</p><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/11.png" class="" title="多杆串联"><p>​ 实际运动时，由于只有一个自由度，四个变量只能变一个。</p><h2 id="dh表示法">3-3 DH表示法</h2><ol type="1"><li>在杆件上建立坐标系的方法：</li></ol><ul><li>Z轴：转轴方向</li><li>X轴：沿着<span class="math inline">\(a_i\)</span>方向（绿色虚线，if<span class="math inline">\(a_i\neq0\)</span>）</li></ul><p>​ 和<span class="math inline">\(Z_i,Z_{i+1}\)</span>垂直（if <spanclass="math inline">\(a_i=0\)</span>）</p><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/12.png" class="" title="A"><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/13.png" class="" title="B"><ul><li>Y轴：与X轴Z轴垂直，遵循右手定则</li></ul><ol start="2" type="1"><li>地杆坐标系的定义</li></ol><p>​ 地杆不动，为简化，可将地杆的frame将1杆的frame定义成一样的</p><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/14.png" class="" title="地杆坐标系"><ol start="3" type="1"><li>最后一杆坐标系定义</li></ol><p>​ X方向和<spanclass="math inline">\(X_{n-1}\)</span>一样的方向(和上面一样)</p><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/15.png" class="" title="最后一杆"><ol start="4" type="1"><li>总结表</li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/16.png" class="" title="总结"><h2 id="link-trans">3-4 Link trans</h2><p>寻找两个临近坐标系间的关系（旋转矩阵的量化表达）</p><ol type="1"><li><p>坐标系变换流程：i-1的z轴转到和i相同（转到R坐标系），将R沿公垂线评议，再将R的x轴旋转到和i的x轴重合（得到P坐标系），最后将P沿axisi 平移到i坐标系。</p></li><li><p>坐标变换：<spanclass="math inline">\(^{i-1}P=^{i-1}_{i}T^iP=^{i-1}_RT\ ^R_QT \ ^Q_PT \^P_iT\ ^iP\)</span>（前边表示从上标变换到下标）(和欧拉角类似)</p></li></ol><p>​ 即i-1到i的转换可分为四部： <span class="math display">\[^{i-1}_iT=^{i-1}_RT\ ^R_QT\ ^Q_PT\^P_iT\\=T_{\hat{X}_{i-1}}(\alpha_{i-1})\ \ \ T_{\hat{X}_R}(a_{i-1})\ \ \T_{\hat{Z}_Q}(\theta_i)\ \ \ T_{\hat{Z}_P}(d_i)\\=\begin{bmatrix}c\theta_i&amp;-s\theta_i&amp;0&amp;a_{i-1}\\s\theta_ic\alpha_{i-1}&amp;c\theta_ic\alpha_{i-1}&amp;-s\alpha_{i-1}&amp;-s\alpha_{i-1}d_i\\s\theta_is\alpha_{i-1}&amp;c\theta_is\alpha_{i-1}&amp;c\alpha_{i-1}&amp;c\alpha_{i-1}d_i\\0&amp;0&amp;0&amp;1\end{bmatrix}\]</span> <img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/17.png" class="" title="图示"></p><ol start="3" type="1"><li>连续变换：<spanclass="math inline">\(^0_nT=^0_1T^1_2T...^{n-1}_nT\)</span></li></ol><h2 id="link-trans-examples">3-5 Link Trans Examples</h2><ol type="1"><li>RRR型（三个旋转）</li></ol><p>!<img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/18.png" class="" title="RRR"></p><ol start="2" type="1"><li>RPR型（旋转-平移-旋转）</li></ol><p><span class="math inline">\(Z_1\)</span>和<spanclass="math inline">\(Z_2\)</span>相交或重合，<spanclass="math inline">\(X_1\)</span>和<spanclass="math inline">\(X_2\)</span>可以选和<spanclass="math inline">\(Z_1Z_2\)</span>垂直的，有多种选法</p><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/19.png" class="" title="RPR"><ol start="3" type="1"><li>RRR型，若<spanclass="math inline">\(a=0\)</span>（两个Z轴相交），<spanclass="math inline">\(X_2\)</span>有两个选择，<spanclass="math inline">\(Z_2\)</span>有两个选择</li></ol><img src="/2024/07/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AD%A3%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/20.png" class="" title="Z轴相交的四种情况"><h2 id="actuator-joint-and-cartesian-spaces执行机构关节和笛卡尔空间">3-6Actuator, Joint, and Cartesian Spaces(执行机构，关节和笛卡尔空间)</h2><ol type="1"><li>Actuator space（马达转角）与 joint space（关节转角） 的相互转换</li></ol><p>​ 由联结制动器和joint的机械决定</p><figure><imgsrc="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240813111220803.png"alt="image-20240813111220803" /><figcaption aria-hidden="true">image-20240813111220803</figcaption></figure><p>例：轮式机器人/足式机器人</p><h2 id="dh表达法小结">3-7 DH表达法小结</h2><p>表达法1：</p><ul><li><p>按从上到下的顺序进行变换</p></li><li><p>前两个用i-1，后两个用i+1</p></li><li><p>link i 在axis i的前方</p></li></ul><figure><imgsrc="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240814111625429.png"alt="image-20240814111625429" /><figcaption aria-hidden="true">image-20240814111625429</figcaption></figure><p>表达法2：</p><ul><li>link i 在joint i 前方</li><li>使用的量一致，全部属于i，更直观</li></ul><figure><imgsrc="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240814111638815.png"alt="image-20240814111638815" /><figcaption aria-hidden="true">image-20240814111638815</figcaption></figure><p>旋转矩阵表达式：</p><p><imgsrc="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240815142822070.png" /></p><h1 id="逆向运动学">4.逆向运动学</h1><h2 id="逆向运动学导论">4-1 逆向运动学导论</h2><ol type="1"><li><p>已知<span class="math inline">\(\{H\}\)</span>或<spanclass="math inline">\(^wP\)</span>，反算所有关节的<spanclass="math inline">\(\theta_i\)</span></p></li><li><p>Reachable workspace: 手臂可以用一种以上姿态到达的位置</p></li><li><p>dexterousworkspace:手臂可以用任何的姿态到达的位置（是rw的子集）</p></li><li><p>subspace：手臂在定义头尾的T所能到达的变动范围</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRTP</tag>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据安全与隐私保护</title>
    <link href="/2024/07/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/"/>
    <url>/2024/07/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<p>英文名：Big Data Security and Privacy Protection</p><p>教师：Rongxing Lu,</p><p>课程安排：</p><ul><li>1 Home Assignment + 1 Project : ddl July 31</li><li>textbook : Privacy in a Digital , Networked World</li></ul><h1 id="introduction">Introduction</h1><ol type="1"><li>Internet of Things(IoT)------a popular technology</li><li>Types of IoT Applications:<ol type="1"><li>In massive IoT Applications</li><li>In critical IoT applications : reliability,availability,and lowlatency</li></ol></li><li>Big data-driven decision making in Smart X</li><li>Smart X becomes Vulnerable X</li><li><img src="/2024/07/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/1.png" class="" title="This is an example image"></li></ol><p>Attack vector in IoT:</p><p>​ Device Security : Physical attack, Cyber attack</p><p>​ Data Security &amp; Privacy : Big Data must be<strong>authentic</strong>,</p><p>​ Three Example</p><h1 id="topic-0">Topic 0</h1><h3 id="what-is-personal-data">1. what is personal data</h3><ul><li>name , an identification number , location data,I</li><li>identified data</li><li>health care data</li><li>...</li></ul><h3 id="why-data-privacy-matters">2.why data privacy matters</h3><ul><li>we are responsible for handling people's most personalinformation</li><li>......</li></ul><h3 id="gdprgeneral-data-protection-regulation">3. GDPR:general dataprotection regulation</h3><p>​ what's changing in GDPR</p><ul><li>new rights(e.g.'right to be forgotten)</li><li>greater e,phasis on transparency and record-keeping</li><li>mandatory data brreach reporting</li><li>much larger fines for when organisations get things wrong</li></ul><h3 id="what-is-data-privacy-all-about">4. What is data privacy allabout</h3><ul><li>being open with people abloyt how ...</li><li>...</li></ul><h3 id="section">......</h3><h3 id="attacks-passiveactive-attack">5. Attacks : Passive/Activeattack</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记</title>
    <link href="/2024/07/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python学习笔记">Python学习笔记</h1><h3 id="第一章-python语言概述">第一章 Python语言概述</h3><h4 id="python语言简介">1.1 Python语言简介</h4><ol type="1"><li><p>特点：自由软件、设计哲学“明确、简单、优雅”、具有丰富的资源库等</p></li><li><p>IDE：IDLE、Pycharm、Spyder、Jupyter、Python Tutor</p></li><li><p>选择Python 3版本</p></li><li><p>使用：</p><ul><li><p>交互式：&gt;&gt;&gt;后输入</p></li><li><p>文件式：file-&gt;new file-&gt;save（保存）-&gt;run-&gt;runmode</p></li></ul></li></ol><h4 id="标识符和变量">1.2 标识符和变量</h4><p>​ 1.标识符由字母、数字、下划线组成（Python3可以有中文），不能以数字开头</p><p>​2.关键字不能做标识符；关键字也区分大小写，如True是关键字，而true不是。py是大小写敏感的</p><p>​ 3.字符串也可以做常量，如“hello”</p><p>​4.变量不需要先定义或者声明，属于动态类型语言，可对变量多次赋值且赋值的数据类型可以不一样，可用type()查看数据类型</p><p>​ 5.特别的，如果对一个有函数功能的函数名赋值，赋值之后函数功能消失</p><p>​ 如sum([1,2,3])=6;</p><p>​ sum=5后，求和功能消失，再用的话会报错</p><p>​ 解决：del (sum) （del是删除函数）</p><p>​ 因此，不要用python的内置函数作为变量</p><p>​ 6. id()函数显示变量地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span><br>b=<span class="hljs-number">1</span><br><span class="hljs-built_in">id</span>(a)<br><span class="hljs-built_in">id</span>(b)<br></code></pre></td></tr></table></figure><p>​会发现a,b内存地址一样，因为python中对变量进行赋值是建立变量和值之间的指向关系</p><p>​ 再输入<code>id(1)</code>，发现和上面的<code>id(a)</code><code>id(b)</code>一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">而<br>a=<span class="hljs-number">1000</span><br>b=<span class="hljs-number">1000</span><br><span class="hljs-built_in">id</span>(<span class="hljs-number">1000</span>)<br><span class="hljs-built_in">id</span>(a)<br><span class="hljs-built_in">id</span>(b)<br></code></pre></td></tr></table></figure><p>​ <code>id(a)</code> <code>id(b)</code><code>id(1000)</code>不一样</p><p>​原因是python解释器会把小整数(-5~256)存放在小整数对象池中，不需要对这些对象再次进行内存分配</p><p>​ 对于大整数和其他类型变量，会随机分配内存空间</p><h4 id="输入函数与输出函数">1.3 输入函数与输出函数</h4><p>1.输入函数input()</p><p>​内置函数，从键盘中读入__字符串__,若想输入其他类型——强制类型转换，如int(input())</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;st=<span class="hljs-built_in">input</span>()<br>hello   <span class="hljs-comment">#输入的</span><br>&gt;&gt;&gt;st<br><span class="hljs-string">&#x27;hello&#x27;</span><br><br>&gt;&gt;&gt;a=<span class="hljs-built_in">input</span>()<br><span class="hljs-number">123</span><br>&gt;&gt;&gt;a<br><span class="hljs-string">&#x27;123&#x27;</span><br>&gt;&gt;&gt;<span class="hljs-built_in">type</span>(a)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><br>&gt;&gt;&gt;a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-number">123</span><br>&gt;&gt;&gt;a<br><span class="hljs-number">123</span><br>&gt;&gt;&gt;<span class="hljs-built_in">type</span>(a)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>输入多个整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;a,b= <span class="hljs-built_in">input</span>().split()<br><span class="hljs-number">12</span> <span class="hljs-number">34</span><br>&gt;&gt;&gt;a<br><span class="hljs-string">&#x27;12&#x27;</span><br>&gt;&gt;&gt;b<br><span class="hljs-string">&#x27;34&#x27;</span><br></code></pre></td></tr></table></figure><p>输入前有提示语</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(“请输入一个整型值：”))<br></code></pre></td></tr></table></figure><p>2.输出函数print()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(a)<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(a,b)  //两个值<br><br>&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment">#输出</span><br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br>&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-comment">#输出</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><h3 id="第二章-用python语言编写程序">第二章 用Python语言编写程序</h3><h4 id="数字类型">2.1 数字类型</h4><ol type="1"><li>整数</li></ol><ul><li><p>与数学中整数概念一致，不像c那样有范围</p></li><li><p>可正可负</p></li><li><p>默认情况下采用十进制</p></li></ul><table><thead><tr><th>进制</th><th>前导符</th><th>示例</th><th>十进制</th></tr></thead><tbody><tr><td>二进制</td><td>0b/0B</td><td>0b10</td><td>2</td></tr><tr><td>八进制</td><td>0o/0O</td><td>0o10</td><td>8</td></tr><tr><td>十六进制</td><td>0x/0X</td><td>0x10</td><td>16</td></tr></tbody></table><ol start="2" type="1"><li>浮点数</li></ol><ul><li>与数学中实数概念一致</li><li>取值范围和精度有限制</li><li>小数：1.23 3.14 -1.22</li></ul><p>​ 科学计数法：1.23e9 1.21e-5</p><ul><li>运算存在不确定尾数，有误差。保留小数：round(0.1+0.1,2)保留两位</li></ul><ol start="3" type="1"><li>复数</li></ol><ul><li>与数学中复数概念一致 a=complex(1,2)</li><li>虚部用j表示 a (1+2j)</li></ul><ol start="4" type="1"><li>运算符</li></ol><ul><li>加+，减-，乘*，浮点数除/,整数除//，求余%,求幂**</li></ul><p>​ (3/2=1.5,3//2=1,-3//2=-2(和c不一样) <strong>向左取整</strong>)</p><p>​ (3%2=1 ,3.2%1.5=0.2000000000000000000000018)</p><p>​ (2**3=8)</p><ul><li><p>使用方法：import math-&gt;math.函数名</p><table><thead><tr><th>函数或常数</th><th>功能</th></tr></thead><tbody><tr><td>e</td><td>自然常数</td></tr><tr><td>pi</td><td>圆周率</td></tr><tr><td>log(x,base)</td><td>返回以base为底的对数，缺省为e</td></tr><tr><td>pow(x,y)</td><td>返回x的y次方</td></tr><tr><td>sqrt(x)</td><td>返回x的平方根</td></tr><tr><td>fabs(x)</td><td>返回x的绝对值</td></tr><tr><td>round(x,n)</td><td>返回浮点数x的四舍五入值，n代表保留的位数</td></tr><tr><td>divmod(x,y)</td><td>返回x和y的商和余数</td></tr></tbody></table></li></ul><h4 id="字符串">2.2 字符串</h4><ol type="1"><li><p>Python没有单字符类型，所有字符都被当做字符串，字符串是以引号括起来的任意文本</p></li><li><p>单引号‘abc’ 双引号“hello” 三引号“’hello</p></li></ol><p>​ world”‘（可以表示多行文本）</p><ol start="3" type="1"><li>转义字符</li></ol><table><thead><tr><th>\</th><th>反斜杠符号</th></tr></thead><tbody><tr><td>\'</td><td>单引号</td></tr><tr><td>\"</td><td>双引号</td></tr><tr><td></td><td>响铃</td></tr><tr><td> 退格</td><td></td></tr><tr><td></td><td>换行</td></tr><tr><td> 纵向制表符</td><td></td></tr><tr><td> 横向制表符</td><td></td></tr><tr><td> 回车</td><td></td></tr><tr><td> 换页</td><td></td></tr><tr><td></td><td>最多三位八进制，如\12表示换行</td></tr><tr><td></td><td>十六进制数，yy代表的字符，例如：0a代表换行</td></tr></tbody></table><ol start="4" type="1"><li>字符串运算符</li></ol><table><thead><tr><th>运算符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>连接字符串</td><td>&gt;&gt;&gt;'hello'+'world'------&gt;'helloworld'（只能在字符串间进行）</td></tr><tr><td>*</td><td>复制字符串</td><td>&gt;&gt;&gt;'ab'*3-------&gt;'ababab'</td></tr></tbody></table><ol start="5" type="1"><li>字符串切片</li></ol><ul><li>字符串是一个有序序列，正向递增/负向递减</li></ul><p>0 1 2 3 4 5 6 7 -8 -7 -6 -5 -4 -3 -2 -1</p><ul><li>索引：在[]中给出序号</li><li>切片：在[]中给出切片序号范围</li></ul><p>如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-string">&quot;abcdefgh&quot;</span><br>s[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;a&#x27;</span><br>s[-<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;h&#x27;</span><br>s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]=<span class="hljs-string">&#x27;bcde&#x27;</span><br></code></pre></td></tr></table></figure><ol start="6" type="1"><li>布尔值</li></ol><ul><li>True 、False</li></ul><ol start="7" type="1"><li>关系运算</li></ol><table><thead><tr><th>运算符</th><th>表达式</th><th>含义</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>x==y</td><td>x等于y</td><td>"ABCD"=="ABCDEF"</td><td>False</td></tr><tr><td>!=</td><td>x!=y</td><td>x不等于y</td><td>"ABCD"！="abcd"</td><td>True</td></tr><tr><td>&gt;</td><td>x&gt;y</td><td>x大于y</td><td>"ABC"&gt;"ABD"</td><td>False</td></tr><tr><td>&gt;=</td><td>x&gt;=y</td><td>x大于等于y</td><td>123&gt;=23</td><td>True</td></tr><tr><td>&lt;</td><td>x&lt;y</td><td>x小于y</td><td>"ABC"&lt;"DEF"</td><td>True</td></tr><tr><td>&lt;=</td><td>x&lt;=y</td><td>x小于等于y</td><td>"123"&lt;="23"</td><td>True</td></tr></tbody></table><p>另外，关系运算连在一起：</p><ul><li>1&lt;3&lt;5等价于1&lt;3 and 3&lt;5</li><li>3&lt;5&gt;2 True</li><li>1&gt;6&lt;8 False</li><li>'Hello'&gt;'world' ascii('H')=72&lt;ascii('w')=119 False</li><li>字符串和数字不能比较</li></ul><ol start="8" type="1"><li>逻辑运算</li></ol><p><code>and运算</code> <code>or运算</code> <code>not运算</code></p><p>例：3&gt;5 and a&gt;3 #注意，此时a未定义。 输出False</p><p>​ 3&gt;5 or a&gt;3 NameError. name 'a' is not defined 短入原则</p><p>​ not 3-----&gt;False</p><p>​ not 0-----&gt;True</p><ol start="9" type="1"><li>优先级和结合性</li></ol><p>**从右向左： 例如2**3**2=512</p><h4 id="内置转换函数">2.3 内置转换函数</h4><ol type="1"><li>类型转换</li></ol><p><code>bool()</code> <code>float()</code> <code>complex()</code><code>str()</code> <code>int()</code> <code>list()</code></p><ul><li>bool('str') True</li><li>float(3) 3.0</li><li>complex(1,2) (1+2j)</li><li>str(123) '123'</li><li>list('abcd') ['a','b','c','d']</li><li>int(x[,base=10])</li><li><ul><li>int() #不传入参数时，结果0</li><li>int("02") 2（去掉0）</li><li>int(" 35 ") 35 (去掉空格，但3、5不能分开)</li><li>int("35",8)=29 （八进制）</li></ul></li></ul><ol start="2" type="1"><li>ord函数和chr函数</li></ol><p>ord('a') #ASCII码值 -&gt;97</p><p>ord('中') #汉字‘中’的Unicode码 -&gt;20013</p><p>chr(97) #参数类型为整数 -&gt;‘a’</p><ol start="3" type="1"><li>bin函数，oct函数，hex函数</li></ol><p>bin函数——二进制、oct函数——八进制、hex——十六进制</p><h4 id="基本语句">2.4 基本语句</h4><h5 id="赋值语句">2.4.1 赋值语句</h5><ol type="1"><li><p>基本形式：变量=值</p></li><li><p>序列赋值 x,y=4,8 ------&gt;x等于4,y等于8</p></li></ol><p>​ x,y="ab"------&gt;x='a',y='b'</p><p>​ 变量交换：a,b=b,a</p><ol start="3" type="1"><li>i,j=[1,2,3]报错</li></ol><p>​ i,*j=[1,2,3] ------&gt;i=1,j=[2,3]</p><ol start="4" type="1"><li>支持多变量赋值 a=b=c=5</li></ol><p>​ 结果a=5,b=5,c=5</p><h5 id="if语句">2.4.2 if语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Chinese">if 逻辑表达式:<br>语句块1<br>else:<br>语句块2<br></code></pre></td></tr></table></figure><p>例：判断奇偶数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是个偶数&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是个奇数&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="for语句">2.4.3 for语句</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">for</span> <span class="hljs-keyword">variable</span> in 列表<span class="hljs-comment">:</span><br>语句块 <br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>range函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">range</span>(start,stop,step)<br>start:默认从<span class="hljs-number">0</span>开始<br>stop:到stop结束，但是不包括stop<br>step:步长，默认为<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br>[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>]<br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">10</span>,-<span class="hljs-number">1</span>))<br>[<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">5</span>,-<span class="hljs-number">6</span>,-<span class="hljs-number">7</span>,-<span class="hljs-number">8</span>,-<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">求<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+...+n的和<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>result=<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)))<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">求n!<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>f=<span class="hljs-number">1</span><br>l=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br>    f=f*i<br></code></pre></td></tr></table></figure><h5 id="列表推导式">2.4.4 列表推导式</h5><p>1.列表</p><p>​ python中最常用的数据类型之一：</p><ul><li>由零个或多个元素组成，元素之间用逗号隔开，整个列表被方括号包裹</li><li>元素类型可以相同也可以不同</li><li>通过序号可以引用列表中的元素</li><li>支持加法、乘法、比较、索引、切片等</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[1,2,3]</span>+<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;python&#x27;</span>]</span>-&gt;<span class="hljs-selector-attr">[1,2,3,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;python&#x27;</span>]</span><br><span class="hljs-selector-attr">[1]</span>*<span class="hljs-number">10</span> -&gt;<span class="hljs-selector-attr">[1,1,1,1,1,1,1,1,1,1]</span><br><span class="hljs-selector-attr">[1,2,3]</span>&lt;<span class="hljs-selector-attr">[2,3,4]</span> True<br></code></pre></td></tr></table></figure><p>2.列表推导式</p><ul><li><p>简明扼要的方法创建列表</p></li><li><p>将循环和条件判断相结合</p></li><li><p>基本格式 ：n1=[2*number for number in [1,2,3,4,5]]</p></li></ul><p>​ n1=[2,4,6,8,10]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n1=[number <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>)]<br>n1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>n1=[number <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>) <span class="hljs-keyword">if</span> number%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>]<br>n1=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">求<span class="hljs-number">1</span>+<span class="hljs-number">1</span>/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>/<span class="hljs-number">3.</span>..<span class="hljs-number">.1</span>/<span class="hljs-number">20</span><br>a=<span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>/i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>)])<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">求<span class="hljs-number">1</span>-<span class="hljs-number">1</span>/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>/<span class="hljs-number">3</span>-<span class="hljs-number">1</span>/<span class="hljs-number">4</span>+...前n项和<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=<span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>/i <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span>/i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">6</span>+<span class="hljs-number">66</span>+<span class="hljs-number">666.</span>.....（生成：<span class="hljs-string">&#x27;6&#x27;</span>*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)）<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>[<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;6&#x27;</span>*i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)]<br><span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;6&#x27;</span>*i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)])<br><br></code></pre></td></tr></table></figure><h4 id="格式化输出">2.5 格式化输出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">华氏-摄氏温度转换表<br>lower,upper=<span class="hljs-built_in">input</span>().split()<br>lower,upper=<span class="hljs-built_in">int</span>(lower),<span class="hljs-built_in">int</span>(upper)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lower,upper+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot;&#123;:.1f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>*(i-<span class="hljs-number">32</span>)/<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><p>format()函数</p><ol type="1"><li>基本格式：str.format()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-number">3.14159</span><br>y=<span class="hljs-number">2</span>*x*<span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:.2f&#125; &#123;1:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x,y))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>-<span class="hljs-number">2</span>/<span class="hljs-number">3</span>+<span class="hljs-number">3</span>/<span class="hljs-number">5</span>-<span class="hljs-number">4</span>/<span class="hljs-number">7.</span>....<br>一、<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>result=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>:<br>        result = result + i/(<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        result = result - i/(<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br>二、<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>alist=[i/(<span class="hljs-number">2</span>*i-i) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> -i/(<span class="hljs-number">2</span>*i-i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)]<br>result=<span class="hljs-built_in">sum</span>(alist)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br></code></pre></td></tr></table></figure><h3 id="第三章-使用字符串列表和元组">第三章 使用字符串、列表和元组</h3><h4 id="序列的访问及运算符">3.1 序列的访问及运算符</h4><h5 id="序列类型容器">3.1.1 序列类型容器</h5><ol type="1"><li>容器：序列容器---字符串、列表</li></ol><p>​ 非序列容器</p><ol start="2" type="1"><li>加法、乘法：不会改变容器本身</li><li>某一元素是否在容器中？</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s1=<span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-keyword">in</span> s1----&gt;<span class="hljs-literal">True</span><br><span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-keyword">in</span> s1----&gt;<span class="hljs-literal">False</span><br><span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s1----&gt;<span class="hljs-literal">True</span><br>t1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-number">1</span> <span class="hljs-keyword">in</span> t1----&gt;<span class="hljs-literal">True</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> t1----&gt;<span class="hljs-literal">False</span>??????????<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<span class="hljs-number">3</span>]----&gt;<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h5 id="取单个元素">3.1.2 取单个元素</h5><p>1.用方括号[]取得列表中单一元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>][<span class="hljs-number">4</span>]<br><span class="hljs-number">5</span><br>&gt;&gt;&gt;<span class="hljs-string">&quot;this is a string&quot;</span>[<span class="hljs-number">6</span>]<br>s<br>如果越界：<br>&gt;&gt;&gt;t1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>&gt;&gt;&gt;t1[<span class="hljs-number">3</span>]<br>Error!!!<br><br>&gt;&gt;&gt;t1[-<span class="hljs-number">1</span>]<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>2.修改列表的某元素（字符串不可以）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;t1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>&gt;&gt;&gt;t1[<span class="hljs-number">0</span>]<br><span class="hljs-number">1</span><br>&gt;&gt;&gt;t1[<span class="hljs-number">0</span>]=<span class="hljs-number">4</span><br>&gt;&gt;&gt;t1<br>[<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h5 id="字符串和列表切片">3.1.3 字符串和列表切片</h5><p>[2:6]是在2,6号前面各切一刀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;26C&#x27;</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]----&gt;<span class="hljs-string">&#x27;26&#x27;</span><br><span class="hljs-string">&#x27;8c&#x27;</span>[:-<span class="hljs-number">1</span>]----&gt;<span class="hljs-string">&#x27;8&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">切一段<br><span class="hljs-string">&#x27;zhejiang&#x27;</span>[:<span class="hljs-number">3</span>]----&gt;<span class="hljs-string">&#x27;zhe&#x27;</span><br><span class="hljs-string">&#x27;zhejiang&#x27;</span>[<span class="hljs-number">3</span>:<span class="hljs-number">8</span>]------&gt;<span class="hljs-string">&#x27;jiang&#x27;</span>(虽然<span class="hljs-number">8</span>号不存在，但是切片的时候可以这么做)<br><span class="hljs-string">&#x27;zhejiang&#x27;</span>[<span class="hljs-number">3</span>:]------&gt;<span class="hljs-string">&#x27;jiang&#x27;</span>(冒号后面不写，取到结尾)<br></code></pre></td></tr></table></figure><h5 id="序列的函数">3.1.4 序列的函数</h5><ol type="1"><li>len() 求序列的长度——有多少个元素</li></ol><p>最后一个元素t1[-1]或t1[len(t1)-1]</p><ol start="2" type="1"><li>min()、max()——获取列表中最大、最小的元素</li></ol><h4 id="使用字符串">3.2 使用字符串</h4><h5 id="字符串再认识">3.2.1 字符串再认识</h5><p>字符串内有单/双引号</p><ul><li>字符串里有单引号----&gt;外面用双引号</li><li>使用转义字符\' \"<br /></li><li>三引号'''----&gt;多行表达一个字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">一、&gt;&gt;&gt;s=<span class="hljs-string">&#x27;&#x27;&#x27;this</span><br><span class="hljs-string">is</span><br><span class="hljs-string">a</span><br><span class="hljs-string"> string</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>&gt;&gt;&gt;s<br><span class="hljs-string">&#x27;this\nis\na\n string&#x27;</span><br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(s)<br>this<br><span class="hljs-keyword">is</span><br>a<br> string<br>    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#另一种多行表达的方法：结尾加\(但是前后是紧紧连接的)</span><br>&gt;&gt;&gt;s = <span class="hljs-string">&#x27;this\</span><br><span class="hljs-string">is\</span><br><span class="hljs-string">a\</span><br><span class="hljs-string"> string.\</span><br><span class="hljs-string"> &#x27;</span><br>&gt;&gt;&gt;s<br><span class="hljs-string">&#x27;thisisa string.&#x27;</span><br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(s)<br><span class="hljs-string">&#x27;thisisa string.&#x27;</span><br></code></pre></td></tr></table></figure><p>r：字符串原样输出，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;s=<span class="hljs-string">r&#x27;this\nis\na\ntest/&#x27;</span><br>&gt;&gt;&gt;s<br><span class="hljs-string">&#x27;this\\nis\\na\\ntest/&#x27;</span>（\\就是\）<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(s)<br>this\nis\na\ntest/<br></code></pre></td></tr></table></figure><h5 id="字符串函数">3.2.2 字符串函数</h5><p>* 字符串本身不变</p><ol type="1"><li>lower()将字母变成小写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;s=<span class="hljs-string">&#x27;John Smith&#x27;</span><br>&gt;&gt;&gt;s<br><span class="hljs-string">&#x27;John Smith&#x27;</span><br>&gt;&gt;&gt;s1=s.lower()<br>&gt;&gt;&gt;s1<br><span class="hljs-string">&#x27;john smith&#x27;</span><br>&gt;&gt;&gt;s<br><span class="hljs-string">&#x27;John Smith&#x27;</span>（原字符串不变）<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>find()在字符串中找子字符串的位置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;s.find(<span class="hljs-string">&#x27;hn&#x27;</span>)<br><span class="hljs-number">2</span><br>&gt;&gt;&gt;s.find(<span class="hljs-string">&#x27;aa&#x27;</span>)<br>-<span class="hljs-number">1</span>（代表没找到）<br><br>&gt;&gt;&gt;<span class="hljs-string">&#x27;hello world&#x27;</span>.find(<span class="hljs-string">&#x27;l&#x27;</span>)<br><span class="hljs-number">2</span>（找的是第一次出现的位置）<br>&gt;&gt;&gt;<span class="hljs-string">&#x27;hello world&#x27;</span>.find(<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">3</span>)<br><span class="hljs-number">3</span>（从<span class="hljs-number">3</span>开始找）<br>&gt;&gt;&gt;<span class="hljs-string">&#x27;hello world&#x27;</span>.find(<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">4</span>)<br><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>count()找字符（串）出现次数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-string">&#x27;hello world&#x27;</span>.count(<span class="hljs-string">&#x27;l&#x27;</span>)<br><span class="hljs-number">3</span><br>&gt;&gt;&gt;<span class="hljs-string">&#x27;hello world&#x27;</span>.count(<span class="hljs-string">&#x27;lo&#x27;</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>strip()去掉两端空格</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;s = <span class="hljs-string">&#x27;   hello world   &#x27;</span><br>&gt;&gt;&gt;s.strip()<br><span class="hljs-string">&#x27;hello world&#x27;</span>（两边空格都去掉）<br>&gt;&gt;&gt;s.rstrip()<br><span class="hljs-string">&#x27;   hello world&#x27;</span>(去掉右边空格)<br>&gt;&gt;&gt;s.lstrip()<br><span class="hljs-string">&#x27;hello world   &#x27;</span>（去掉左边空格）<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>replace()替换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;s=<span class="hljs-string">&#x27; hello world &#x27;</span><br>&gt;&gt;&gt;s.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br><span class="hljs-string">&#x27;-hello-world-&#x27;</span><br>&gt;&gt;&gt;s.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>)<br><span class="hljs-string">&#x27;--hello--world--&#x27;</span><br>&gt;&gt;&gt;s.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-string">&#x27;helloworld&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="字符串和数字之间的转换">3.2.3 字符串和数字之间的转换</h5><p>1.str()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-built_in">str</span>(<span class="hljs-number">123</span>)<br><span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>2.有一定格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-string">&#x27;I am %d years old and weight %d kg&#x27;</span> % (<span class="hljs-number">18</span>,<span class="hljs-number">50</span>)<br>I am <span class="hljs-number">18</span> years old <span class="hljs-keyword">and</span> weight <span class="hljs-number">50</span> kg<br>&gt;&gt;&gt;<span class="hljs-string">&#x27;it is %.1fC&#x27;</span>%<span class="hljs-number">30.5123</span><br><span class="hljs-string">&#x27;it is 30.5&#x27;</span><br>&gt;&gt;&gt;<span class="hljs-string">&#x27;it is %.1fC&#x27;</span>%<span class="hljs-number">30.565</span><br><span class="hljs-string">&#x27;it is 30.6&#x27;</span>（四舍五入）<br>&gt;&gt;&gt;<span class="hljs-string">&#x27;I am %10d years old&#x27;</span> % <span class="hljs-number">18</span><br><span class="hljs-string">&#x27;I am         18 years old&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="列表的使用">3.3 列表的使用</h4><h5 id="基本的列表操作">3.3.1 基本的列表操作</h5><ol type="1"><li>运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;a=<span class="hljs-number">6</span><br>&gt;&gt;&gt;b=<span class="hljs-number">8</span><br>&gt;&gt;&gt;t=[a+<span class="hljs-number">2</span>,b-a]<br>&gt;&gt;&gt;t<br>[<span class="hljs-number">8</span>,<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>list()函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;t=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;this is a string&#x27;</span>)<br>&gt;&gt;&gt;t<br>[<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>广义表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">t=[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br>&gt;&gt;&gt;<span class="hljs-built_in">len</span>(t)<br><span class="hljs-number">3</span><br>&gt;&gt;&gt;t[<span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>&gt;&gt;&gt;t[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>两个列表变量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>t2=t1<br><span class="hljs-meta">&gt;&gt;&gt; </span>t2<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>t2[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t2<br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>t1<br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>可以看出，列表变量中，t2=t1是管理权的授予<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">若要创造t2一个新的列表(和t1无关)，可以<br>t2=t1[:](做切片)<br><br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>del()删除列表元素</li></ol><h5 id="列表的函数">3.3.2 列表的函数</h5><ol type="1"><li>append() 往列表后增加一个元素</li></ol><p>​ extend() 往后面拼列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">t1.append(<span class="hljs-number">5</span>)<br>t1.extend([<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>])<br><br>t2.append([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])----&gt;直接将列表作为一个元素插入到最后<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>insert()插入</li></ol><p>​ remove()删除值为多少的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">t1.insert(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>)-----&gt;在原来<span class="hljs-number">1</span>号位前面加<span class="hljs-number">9</span><br>t2.insert(<span class="hljs-number">100</span>,-<span class="hljs-number">1</span>)------&gt;<span class="hljs-number">100</span>超过列表元素个数的时候，会做append的动作<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>pop()删除最后一个，同时返回最后一个</li></ol><p>​ pop(2)删除2号位置元素并将它返回，相当于弹出</p><ol start="4" type="1"><li>reverse()颠倒字符串中所有元素</li><li>index()查找某一元素在列表中第一次出现的位置</li></ol><h5 id="列表和字符串之间的操作">3.3.3 列表和字符串之间的操作</h5><ol type="1"><li>split()函数——分隔</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27;this is a test&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split()<br>[<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27;12:35&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(<span class="hljs-string">&#x27;:&#x27;</span>)  //用于决定用什么来分割<br>[<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;35&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27;12::35&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(<span class="hljs-string">&#x27;::&#x27;</span>)<br>[<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;35&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>[<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;35&#x27;</span>]  //中间会自动加一个空格<br></code></pre></td></tr></table></figure><p>2.join()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27;this is a test&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t=s.split()<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27; &#x27;</span>.join(t)<br><span class="hljs-string">&#x27;this is a test&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="元组的使用">3.4 元组的使用</h4><ol type="1"><li>元组：自变量用圆括号；不可修改</li><li>会对列表本身进行修改的函数，元组不能用</li><li>有被逗号分割的量，天生会被认为是元组</li></ol><h4 id="python随机模块">3.5 Python随机模块</h4><ol type="1"><li>sort()函数——&gt;排序（改变原列表）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>t.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>import random-&gt;random.shuffle()——&gt;随机排列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> random<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.shuffle(t)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.shuffle(t)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>random.choice()——&gt;找出一个</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>random.choice(t)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.choice(t)<br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>random.random()——&gt;返回0-1的浮点数</li></ol><p>​ random.randint(1,100)——&gt;返回1-100的整数</p><p>​random.seed()——&gt;种子，给出一个确定的seed值，就会生成固定的随机数</p><h3 id="第四章-条件循环和其他语句">第四章 条件、循环和其他语句</h3><h4 id="条件语句">4.1 条件语句</h4><ol type="1"><li>if-else语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件表达式:<br>    表达式<span class="hljs-number">1</span><br>    ...<br><span class="hljs-keyword">else</span>:<br>    表达式<span class="hljs-number">2</span><br>    ...<br></code></pre></td></tr></table></figure><ul><li>注意缩进</li><li>嵌套的if-else</li></ul><ol start="2" type="1"><li>elif——级联的if语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">0</span>:<br>    y=<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> x==<span class="hljs-number">0</span>:<br>    y=<span class="hljs-number">0</span><br><span class="hljs-keyword">else</span>:<br>    y=<span class="hljs-number">2</span>*x+<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h4 id="while循环">4.2 while循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:(无穷循环)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#求平均值，以输入-1结束</span><br>s=<span class="hljs-number">0</span><br>cnt=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> x!=-<span class="hljs-number">1</span>:<br>    x=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    s+=x<br>    cnt+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span>   <span class="hljs-comment">#使用break离开循环</span><br><span class="hljs-keyword">if</span> cnt&gt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(s/cnt)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="for循环">4.3 for循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#判断素数</span><br>方法一：<br>x= <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>isprime = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,x):<br>    <span class="hljs-keyword">if</span> x%k==<span class="hljs-number">0</span>:<br>        isprime = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> isprime:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;is prime&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    prinf(<span class="hljs-string">&#x27;is not prime&#x27;</span>)<br><br>方法二：    <br>x= <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,x):<br>    <span class="hljs-keyword">if</span> x%k==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;isprime&#x27;</span>)   <span class="hljs-comment">##for循环的else，for正常结束else执行，否则不执行</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#嵌套for循环,求m，n间素数的和</span><br>m,n=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split)<br>s=<span class="hljs-number">0</span><br>cnt=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">2</span>,x):<br>        <span class="hljs-keyword">if</span> x%k==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        cnt+=<span class="hljs-number">1</span><br>        s+=x<br><span class="hljs-built_in">print</span>(cnt,s)<br></code></pre></td></tr></table></figure><h4 id="range函数">4.4 range函数</h4><ol type="1"><li>range(5)——&gt;0,1,2,3,4</li><li>range(2,10)——&gt; 2,3,4,5,6,7,8,9</li><li>range(2,20,2)——&gt;2,4,6,8,10,12,14,16,18</li></ol><h4 id="异常">4.5 异常</h4><p>1.try、except（如有异常，进入except而不是终止）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>t=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(t[x])<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x is not a valid index&#x27;</span>) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">except</span> 异常类型<span class="hljs-number">1</span>:<br>    语句块<span class="hljs-number">2</span><br><span class="hljs-keyword">except</span> 异常类型<span class="hljs-number">2</span>:<br>    语句块<span class="hljs-number">3</span><br>    ...<br><span class="hljs-keyword">except</span> 异常类型N:<br>    语句块N+<span class="hljs-number">1</span><br><span class="hljs-keyword">except</span>:<br>    语句块N+<span class="hljs-number">2</span><br><span class="hljs-keyword">else</span>:<br>    语句块N+<span class="hljs-number">3</span>(<span class="hljs-keyword">try</span>里没有异常，<span class="hljs-keyword">try</span>完运行<span class="hljs-keyword">else</span>，类似于循环)<br><span class="hljs-keyword">finally</span>:<br>    语句块N+<span class="hljs-number">4</span>(无论有没有异常，都要运行<span class="hljs-keyword">finally</span>)<br></code></pre></td></tr></table></figure><figure><imgsrc="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230116122702291.png"alt="image-20230116122702291" /><figcaption aria-hidden="true">image-20230116122702291</figcaption></figure><h3 id="第五章-集合与字典">第五章 集合与字典</h3><h4 id="集合">5.1 集合</h4><ol type="1"><li>集合用大括号{}，元素不重复，是无序的容器（顺序不能由程序员指定）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>增加元素s.add()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s.add(<span class="hljs-number">0</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.add(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;  <span class="hljs-comment">#如果加的数据已经存在，那再加相当于没做</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>集合创建set()——把列表转换成集合</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s1=<span class="hljs-built_in">set</span>(t)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s1<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>空列表[],空元组(),空字符串''.......{}字典，空集合set()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(&#123;&#125;)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-built_in">set</span>())<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;set&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>其它函数:add(),remove()——添加和删除</li></ol><p>​ min(),max(),len(),sum()</p><p>​ 但不能像列表那样通过下标访问集合元素</p><p>​ 可以遍历集合中所有的元素</p><p>​ in、not in也可以使用</p><p>​ 还可以用==判断两个集合是否相等，&gt;、&lt;判断大小（真子集关系）</p><ol start="6" type="1"><li><code>|</code>并集，<code>&amp;</code>交集（若交集为空，则显示set()），<code>^</code>对称差集——两个集合作并集，去掉交集的成分</li></ol><p>​ <code>-</code>差集（s1-s2:s1里有而s2没有的）</p><h4 id="字典">5.2 字典</h4><ol type="1"><li>基本操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;d=&#123;<span class="hljs-string">&#x27;one&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;two&#x27;</span>:<span class="hljs-number">2</span>&#125;<br>&gt;&gt;&gt;d[<span class="hljs-string">&#x27;one&#x27;</span>]——方括号<br><span class="hljs-number">1</span><br>&gt;&gt;&gt;d[<span class="hljs-string">&#x27;two&#x27;</span>]<br><span class="hljs-number">2</span><br>&gt;&gt;&gt;d[<span class="hljs-string">&#x27;three&#x27;</span>]<br>异常<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;d[<span class="hljs-string">&#x27;three&#x27;</span>]=<span class="hljs-number">3</span><br>&gt;&gt;&gt;d[<span class="hljs-string">&#x27;three&#x27;</span>]<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>字典的基本运算</li></ol><ul><li>删除 del</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">del</span> d[<span class="hljs-string">&#x27;two&#x27;</span>]<br>&gt;&gt;&gt;d<br>&#123;<span class="hljs-string">&#x27;one&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;three&#x27;</span>:<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>遍历 for——遍历字典中的key，再去获取对应的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-built_in">print</span>(d[name])<br><span class="hljs-number">1</span><br><span class="hljs-number">3</span><br>&gt;&gt;&gt;<span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-built_in">print</span>(name)<br>one<br>three<br></code></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;d[<span class="hljs-string">&#x27;one&#x27;</span>]=<span class="hljs-number">11</span><br>&gt;&gt;&gt;d<br>&#123;<span class="hljs-string">&#x27;one&#x27;</span>:<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;three&#x27;</span>:<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>len()——获得字典条目</p></li><li><p>min()/max()——获取最小/大的key（比较的是名字字符串），因此没有sum()</p></li><li><p>另一种访问方式</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;d.get(<span class="hljs-string">&#x27;one&#x27;</span>)<br><span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>对于d中没有的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;d[<span class="hljs-string">&#x27;ok&#x27;</span>]<br>异常<br>&gt;&gt;&gt;d.get(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>（无结果）<br>&gt;&gt;&gt;d.get(<span class="hljs-string">&#x27;ok&#x27;</span>,<span class="hljs-number">0</span>)<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>d.get('ok',0)的妙用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> x != -<span class="hljs-number">1</span>:<br>    d[x]=d.get(x,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>此时若d[x]存在，则取出来直接加；若不存在，则会返回0，起到建立d[x]的作用</p><h4 id="集合与字典的应用">5.3 集合与字典的应用☆</h4><p>例：处理学生成绩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入</span><br>stuid = &#123;&#125; <span class="hljs-comment">#建立字典</span><br>stuscore = &#123;&#125;<br>course = <span class="hljs-built_in">set</span>() <span class="hljs-comment">#表示成绩的空集合</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    line = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> line == <span class="hljs-string">&#x27;END&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    s = line.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">2</span>:<br>        stuid[s[<span class="hljs-number">0</span>]] = s[<span class="hljs-number">1</span>]  <span class="hljs-comment">#s中第一个元素和第二个元素对应，即学号和姓名对应</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(S) == <span class="hljs-number">3</span>:<br>        <span class="hljs-comment">#s[0] = [&#x27;3190101234&#x27;,&#x27;微积分&#x27;,95]</span><br>        d = stuscore.get(s[<span class="hljs-number">0</span>],&#123;&#125;)<br>        d[s[<span class="hljs-number">1</span>]] = <span class="hljs-built_in">int</span>(s[<span class="hljs-number">2</span>])<br>        course.add(s[<span class="hljs-number">1</span>])<br><br>d = stuscore[<span class="hljs-built_in">id</span>]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> score<span class="hljs-comment">#course:</span><br>    <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> d:......<br></code></pre></td></tr></table></figure><h3 id="第六章-函数">第六章 函数</h3><h4 id="函数定义与调用">6.1 函数定义与调用</h4><ol type="1"><li>内置函数不用定义，直接调用</li><li>定义：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数表</span>)：<br>函数体<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">定义函数y=x^<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    value = x**<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">调用f(x)<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>y=f(x)<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>求斐波那契数列前n项</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibs</span>(<span class="hljs-params">n</span>):<br>    result=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">2</span>):<br>        result.append(result[-<span class="hljs-number">2</span>]+result[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> result  <span class="hljs-comment">#函数定义</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>函数要先定义再调用</li><li>lambda表达式：定义一个匿名函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">g = <span class="hljs-keyword">lambda</span> x,y,z:x+y+z<br><span class="hljs-comment">#把lambda定义的匿名函数赋给函数g</span><br><span class="hljs-built_in">print</span>(g(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><h4 id="函数参数">6.2 函数参数</h4><ol type="1"><li>位置参数：传入参数的值按顺序依次赋给形参</li><li>关键字参数：调用参数时可以指定对应形式参数的名字，如<code>def dis(x1,y1,x2,y2)</code>、<code>dis(x1=1,y2=5,y1=3,x2=4)</code></li></ol><ul><li>位置参数和关键字参数混合——先写位置参数，再写关键字参数，否则会出错</li></ul><ol start="3" type="1"><li>默认值参数：当调用方没有提供对应形式参数的值时，可以指定默认形式参数值（定义时）。如果提供了实参，调用时会代替默认值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">arg,result=[]</span>):<br>    result.append(arg)<br>    <span class="hljs-built_in">print</span>(result)<br>init(<span class="hljs-string">&#x27;a&#x27;</span>)<br>init(<span class="hljs-string">&#x27;b&#x27;</span>)<br>init(<span class="hljs-number">1</span>,[<span class="hljs-number">1</span>])<br><br>[<span class="hljs-string">&#x27;a&#x27;</span>]<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]  <span class="hljs-comment">#默认值参数不再重新创建</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>数量可变参数</li></ol><ul><li>当函数参数数目不确定时，*将一组可变数量的位置参数集合成参数值的元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countnum</span>(<span class="hljs-params">a,*b</span>):<br>    <span class="hljs-built_in">print</span>(b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(b)+<span class="hljs-number">1</span>)<br>countnum(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>)<br>countnum(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">89</span>)<br><br>结果：<br>(<span class="hljs-number">7</span>,<span class="hljs-number">9</span>)<br><span class="hljs-number">3</span><br>(<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">89</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><ul><li>**收集参数到字典中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countnum</span>(<span class="hljs-params">a,**d</span>):<span class="hljs-comment">#计算参数个数</span><br>    <span class="hljs-built_in">print</span>(d)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(d)+<span class="hljs-number">1</span>)<br>countnum(<span class="hljs-number">3</span>,x1=<span class="hljs-number">9</span>,x2=<span class="hljs-number">1</span>,x3=<span class="hljs-number">6</span>,x4=<span class="hljs-number">89</span>)<br><br>结果：<br>&#123;<span class="hljs-string">&#x27;x1&#x27;</span>:<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;x2&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;x3&#x27;</span>:<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;x4&#x27;</span>:<span class="hljs-number">89</span>&#125;<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>print()函数的完整表示</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(*<span class="hljs-built_in">object</span>,sep=<span class="hljs-string">&quot; &quot;</span>,end=<span class="hljs-string">&quot;\n&quot;</span>,file=sys.stdout)<br><span class="hljs-built_in">object</span>:输出参数，可变数量<br>sep=<span class="hljs-string">&quot; &quot;</span>:输出分隔符<br>end=<span class="hljs-string">&quot;\n&quot;</span>:输出函数结束换行<br>file=sys.stdout:输出到屏幕缺省<br></code></pre></td></tr></table></figure><ol start="6" type="1"><li>实参拆包，调用时参数前加*</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>l=[<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(l)<br>[<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(*l)<br><span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><ol start="7" type="1"><li>可变对象和不可变对象当参数时</li></ol><ul><li>当实参是不可变对象时，形参值改变不会影响实参</li><li>当实参是可变对象时，形参值改变可能会影响实参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">a,b</span>):<br>    a=<span class="hljs-number">3</span><br>    b=b+a<br>x,y=<span class="hljs-number">7</span>,<span class="hljs-number">9</span><br>change(x,y)<br><span class="hljs-built_in">print</span>(x,y)<br><br>结果：<span class="hljs-number">7</span>,<span class="hljs-number">9</span>  <span class="hljs-comment">#把实参拷贝到形参中，形参改变不影响原来的实参</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change1</span>(<span class="hljs-params">a</span>):<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span><br>    a[<span class="hljs-number">1</span>]=<span class="hljs-number">11</span>+a[<span class="hljs-number">0</span>]<br>l=[<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>change1(l)<br><span class="hljs-built_in">print</span>(l)<br><br>结果： [<span class="hljs-number">3</span>,<span class="hljs-number">14</span>]  <span class="hljs-comment">#拷贝的是实参的地址，形参和实参都是指向这个地址，所以形参改变实参也改变</span><br></code></pre></td></tr></table></figure><h4 id="函数的返回值">6.3 函数的返回值</h4><ol type="1"><li>函数用return语句返回值，如没有用return语句返回，这时函数返回的值为None；如果return后面没有表达式，返回值也是None；None是Python中一个特殊的值，虽然它不表示任何数据，但仍然具有重要的作用</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">判断m到n间素数的个数和它们的和<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isprime</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,i):<br>        <span class="hljs-keyword">if</span> i%k==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>m,n=<span class="hljs-built_in">input</span>().split()<br>m,n=<span class="hljs-built_in">int</span>(m),<span class="hljs-built_in">int</span>(n)<br>p=[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m,n+<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> isprime(i)]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(p),<span class="hljs-built_in">sum</span>(p))<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>返回值是函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">par</span>):<br>    <span class="hljs-keyword">return</span> par<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;a&#x27;</span>:test,<br>        <span class="hljs-string">&#x27;b&#x27;</span>:test1,<br>    &#125;.get(x,test2)<br>    <br><span class="hljs-built_in">print</span>(f(<span class="hljs-string">&#x27;a&#x27;</span>)(<span class="hljs-number">100</span>))<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">4</span>)(<span class="hljs-number">100</span>))<br><br>输出：<br><span class="hljs-number">100</span><br><span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>集合add函数的返回值是None</li></ol><p>按列表原次序输出非重复元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]<br>seen=<span class="hljs-built_in">set</span>()<br>l1=[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> seen <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> seen.add(i)]<br><span class="hljs-built_in">print</span>(l1)<br>输出：[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><h4 id="命名空间和作用域">6.4 命名空间和作用域</h4><ol type="1"><li>变量可被访问的范围称为变量的作用域，也称为变量命名空间或变量名字空间。Python程序用命名空间区分不同空间的相同名字</li><li>python解释器启动时建立一个全局命名空间，全局变量就放在这个空间，还建立内置命名空间，记录所有标准常量名、标准函数名等。在全局命名空间中定义的变量是全局变量</li><li>每一个函数定义自己的命名空间，函数内部定义的变量是局部变量。如果在一个函数中定义一个变量x，在另外一个函数中也定义x变量，因为是在不同的命名空间，所以两者指代的是不同的变量。可以用多种方式获取其他命名空间的变量</li><li>Python语言规定赋值即定义</li></ol><ul><li>全局变量：定义在函数外，作用域是整个程序</li><li>局部变量：定义在函数内，作用域是函数内部。形参也是局部变量</li></ul><ol start="5" type="1"><li>在函数中使用全局变量——global关键字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">scope</span>():<br>    <span class="hljs-keyword">global</span> var1<br>    var1=<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(var1,var2)<br>var1=<span class="hljs-number">10</span><br>var2=<span class="hljs-number">20</span><br>scope()<br><span class="hljs-built_in">print</span>(var1,var2)<br><br>结果：<br><span class="hljs-number">1</span> <span class="hljs-number">20</span><br><span class="hljs-number">1</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h4 id="递归调用">6.5 递归调用</h4><ol type="1"><li>斐波那契数列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n-<span class="hljs-number">1</span>)+fib(n-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>改进：已计算的值放到字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">pre=&#123;<span class="hljs-number">0</span>:<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> pre:<br>        <span class="hljs-keyword">return</span> pre[n]<br>    <span class="hljs-keyword">else</span>:<br>        newvalue=fib(n-<span class="hljs-number">1</span>)+fib(n-<span class="hljs-number">2</span>)<br>        pre[n]=newvalue<br>        <span class="hljs-keyword">return</span> newvalue<br><span class="hljs-built_in">print</span>(fib(<span class="hljs-number">100</span>))    <br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>求嵌套列表的数值和</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">items</span>):<br>    lst=[]<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(x,(<span class="hljs-built_in">list</span>,<span class="hljs-built_in">tuple</span>)):<br>            <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> flatten(x):<br>                lst.append(element)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(x)!=<span class="hljs-built_in">str</span>:<br>                lst.append(x)<br>    <span class="hljs-keyword">return</span> lst<br><br>items=[<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">7</span>],(<span class="hljs-number">68</span>,-<span class="hljs-number">1</span>),<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-number">9</span>]<br>l=[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flatten(items)]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(l))<br></code></pre></td></tr></table></figure><h4 id="内置函数">6.6 内置函数</h4><ol type="1"><li>sorted函数：对字符串，列表，元组，字典等对象进行排序操作（sort应用在list上）</li></ol><p>list的sort是对已经存在的列表进行操作，而sorted返回的是一个新的list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">语法格式：<br><span class="hljs-built_in">sorted</span>(iterable[,key[,reverse]])<br>iterable——序列：如字符串，元组等<br>key——函数，缺省为空<br>reverse——排序规则<br>reverse=<span class="hljs-literal">True</span> 降序，=<span class="hljs-literal">False</span> 升序（默认）<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;students=[(<span class="hljs-string">&#x27;江兴&#x27;</span>,<span class="hljs-number">89</span>,<span class="hljs-number">15</span>),(<span class="hljs-string">&#x27;方鹏&#x27;</span>,<span class="hljs-number">85</span>,<span class="hljs-number">14</span>),(<span class="hljs-string">&#x27;陈科&#x27;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">14</span>)]<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(students,key=<span class="hljs-keyword">lambda</span> s:s[<span class="hljs-number">2</span>]))  <span class="hljs-comment">#将第3行/第2号行按从小到大排列</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>map函数：根据提供的函数对指定序列做映射，返回值是新列表或迭代器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">map</span>(function,iterable,...)<br>function是对参数序列的每一个元素调用function函数，iterable是序列<br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])))<br>[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>]<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x,y:x+y,[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>])))<br>[<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">19</span>]<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>zip函数：将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表或迭代器</li></ol><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">格式：<span class="hljs-built_in">zip</span>([iterable,...])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(a,b)))<br>[(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(a,c)))  <span class="hljs-comment">#与最短的对象相同</span><br>[(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)]<br></code></pre></td></tr></table></figure><p>字典键值互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;d=&#123;<span class="hljs-string">&#x27;blue&#x27;</span>:<span class="hljs-number">500</span>,<span class="hljs-string">&#x27;red&#x27;</span>:<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;white&#x27;</span>:<span class="hljs-number">300</span>&#125;<br>&gt;&gt;&gt;d1=<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(d.values(),d.keys()))<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(d1)<br>&#123;<span class="hljs-number">500</span>:<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-number">100</span>:<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-number">300</span>:<span class="hljs-string">&#x27;white&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>eval和exec函数</li></ol><p>Python是一种动态语言，操作合法性检查都在动态运行中检查，运算的代码需要到运行时才能动态确定；程序结构也可以动态变化，容许动态加载新模块等。这两个函数就体现了这个特点</p><ul><li>eval计算表达式，返回表达式的值</li><li>exec可运行python程序，返回程序运行结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x,y=<span class="hljs-number">3</span>,<span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;x+3*y-4&#x27;</span>)    <br><span class="hljs-number">20</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;print(&quot;hello world&quot;)&#x27;</span>)    <span class="hljs-comment">#eval/exec函数内部都是字符串，要加引号</span><br>hello world<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>all和any函数</li></ol><ul><li>all、any以迭代的对象作为参数</li><li>all参数都为True时才返回True，any参数只要有一个为True就返回True</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">判断素数<br>&gt;&gt;&gt;n=<span class="hljs-number">47</span><br>&gt;&gt;&gt;<span class="hljs-built_in">all</span>[<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> n%k!=<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n)]<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">空列表和<span class="hljs-number">0</span>都表示<span class="hljs-literal">False</span><br>&gt;&gt;&gt;<span class="hljs-built_in">any</span>[[],<span class="hljs-number">0</span>,<span class="hljs-literal">False</span>]<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="程序结构">6.7 程序结构</h4><ol type="1"><li>”import 模块名“是执行文件名为模块名的程序</li><li>”from 模块名 import*“引入模块中的所有函数，调用时不用再加模块名</li><li>“from 模块名 import函数名”引入模块中的单个函数，调用时不用再加模块名</li></ol><h3 id="第七章-文件">第七章 文件</h3><h4 id="文件读写操作">7.1 文件读写操作</h4><ol type="1"><li>计算机文件：二进制文件（图形文件、文字处理程序等）、文本文件</li><li>打开文件</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">textFile=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;7-1.txt&quot;</span>,<span class="hljs-string">&quot;rt&quot;</span>) <span class="hljs-comment">#以文本形式打开，返回文件对象</span><br>textFile=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;7-1.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-comment">#以二进制形式打开</span><br></code></pre></td></tr></table></figure><p>open()</p><ul><li>fileobj=open(filename,mode)</li><li>返回文件对象，filename-文件名，mode-文件类型和操作（t-文本文件（可省略）、b-二进制文件）</li></ul><table><thead><tr><th>文件打开模式</th><th>含义</th></tr></thead><tbody><tr><td>"r"</td><td>只读模式（默认）</td></tr><tr><td>"w"</td><td>覆盖写</td></tr><tr><td>"a"</td><td>追加</td></tr><tr><td>"x"</td><td>创建写（不存在则创建；存在则出错）</td></tr><tr><td>"+"</td><td>与r/w/a/x一起使用，增加读写功能</td></tr><tr><td>"t"</td><td>文本</td></tr><tr><td>"b"</td><td>二进制</td></tr></tbody></table><ol start="3" type="1"><li>文件读写函数</li></ol><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>open()</td><td>打开文件</td></tr><tr><td>read(size)</td><td>从文件读取size长度的字符串，如果未给定/负则读取所有内容</td></tr><tr><td>readline()</td><td>读取整行，返回字符串</td></tr><tr><td>readlines()</td><td>读取整行，返回列表</td></tr><tr><td>write(s)</td><td>把字符串s的内容写入文件</td></tr><tr><td>writelines(s)</td><td>向文件写入一个元素为字符串的列表，如果需要换行则要自己加入每行的换行符</td></tr><tr><td>seek(off,whence=0)</td><td>设置文件当前位置</td></tr><tr><td>tell()</td><td>返回文件读写的当前位置</td></tr><tr><td>close()</td><td>关闭文件</td></tr></tbody></table><ol start="4" type="1"><li>复制文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">source=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cj.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>back=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cjback.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>s=source.read()<br>back.write(s)<br>source.close()<br>back.close()<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>多行文件读写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>    <span class="hljs-built_in">print</span>(line)<br><br></code></pre></td></tr></table></figure><ol start="6" type="1"><li>输入输出重定向</li></ol><ul><li>sys.stdin 标准输入</li><li>sys.stdout 标准输出</li><li>sys.stderr 标准错误输出</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment">#从文件输入改变为键盘输入</span><br>s=sys.stdin.readlines()<br></code></pre></td></tr></table></figure><h4 id="用pandas模块读写常见格式文件">7.2用Pandas模块读写常见格式文件</h4><h4 id="数据可视化plotly模块4.0版">7.3数据可视化——plotly模块（4.0版）</h4><h3 id="第八章-类和对象">第八章 类和对象</h3><h4 id="类和对象的概念">8.1 类和对象的概念</h4><ol type="1"><li>面向对象程序设计（OOP）：使用对象进行程序设计，实现代码复用和设计复用，使得软件开发更高效方便。</li></ol><p>工业界大部分都是面向对象程序设计语言，而C语言是面向过程的程序设计语言，Python是OOP语言</p><ol start="2" type="1"><li>类：类是一种对象的模板和数据类型，它定义了对象的属性（数据），并提供用于初始化对象的初始化程序和操作这些属性的方法（函数）。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span>:     <span class="hljs-comment">#Students类</span><br>    uname=<span class="hljs-string">&#x27;浙江大学&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ino,iname</span>):<br>        <span class="hljs-variable language_">self</span>.no=ino<br>        <span class="hljs-variable language_">self</span>.name=iname<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getinfo</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;学校：&#x27;</span>,Students.uname,<span class="hljs-string">&#x27;,学号：&#x27;</span>,<span class="hljs-variable language_">self</span>.no,<span class="hljs-string">&#x27;,姓名：&#x27;</span>,<span class="hljs-variable language_">self</span>.name)<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>对象：对象是<strong>类</strong>的一个<strong>实例</strong>，使用构造方法来创建一个对象，使用圆点运算符（.）通过引用方法和变量来访问对象的成员。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s1=Students(<span class="hljs-string">&#x27;317000001&#x27;</span>,<span class="hljs-string">&#x27;zjuzhuang&#x27;</span>)   <span class="hljs-comment">#创建一个Students对象s1</span><br>s=<span class="hljs-string">&#x27;浙江大学&#x27;</span>  <span class="hljs-comment">#创建一个字符串对象s，等价于s=str(&#x27;浙江大学&#x27;)</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>三大特性：封装、继承、多态</li></ol><h4 id="类和对象的创建">8.2 类和对象的创建</h4><ol type="1"><li>定义类</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">名字</span>:<br>    <span class="hljs-comment">#初始化</span><br>    <span class="hljs-comment">#定义方法</span><br></code></pre></td></tr></table></figure><p>例如，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span>:     <span class="hljs-comment">#Students类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ino,iname</span>):   <span class="hljs-comment">#构造方法，用于创建对象</span><br>        <span class="hljs-variable language_">self</span>.no=ino    <span class="hljs-comment">#定义成员变量</span><br>        <span class="hljs-variable language_">self</span>.name=iname<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getinfo</span>(<span class="hljs-params">self</span>):    <span class="hljs-comment">#获取对象方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;学校：&#x27;</span>,Students.uname,<span class="hljs-string">&#x27;,学号：&#x27;</span>,<span class="hljs-variable language_">self</span>.no,<span class="hljs-string">&#x27;,姓名：&#x27;</span>,<span class="hljs-variable language_">self</span>.name)<br>        <br>s1=Students(<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-string">&#x27;3170000020&#x27;</span>)   <span class="hljs-comment">#创建s1对象</span><br>s1.getinfo()<br></code></pre></td></tr></table></figure><p>self作为前缀，在方法里面不作为参数使用，这里与函数不同</p><ol start="2" type="1"><li>创建对象 ：<code>对象名.成员名</code></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">s1=Students(<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-string">&#x27;3170000020&#x27;</span>)<br>s1.getinfo()   <span class="hljs-comment">#使用方法</span><br>s1.name     <span class="hljs-comment">#引用变量</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>isinstance测试一个对象是否为某个类的实例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-built_in">isinstance</span>(s1,Students)<br><span class="hljs-literal">True</span><br>&gt;&gt;&gt;<span class="hljs-built_in">isinstance</span>(s1,<span class="hljs-built_in">str</span>)<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>访问对象：<code>对象名.成员名</code></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">&gt;&gt;&gt;s1=Students(<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-string">&#x27;3170000020&#x27;</span>)    <span class="hljs-comment">#创建s1对象</span><br>&gt;&gt;&gt;s1.name                       <span class="hljs-comment">#name是对象的数据</span><br><span class="hljs-string">&#x27;wang&#x27;</span><br><br>&gt;&gt;&gt;s2=Students(<span class="hljs-string">&#x27;zhang&#x27;</span>,<span class="hljs-string">&#x27;113&#x27;</span>)   <span class="hljs-comment">#创建s2对象</span><br>&gt;&gt;&gt;s2.getinfo                   <span class="hljs-comment">#getinfo()是方法</span><br>zhang <span class="hljs-number">113</span><br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>类中的变量必须有初始值，可以初始化成0</li><li>变量值的修改：</li></ol><ul><li>直接通过对象进行修改（直接赋值）</li><li>通过方法进行修改（符合封装）</li></ul><img src="/2024/07/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/test.png" class="" title="This is an example image"><h4 id="使用对象编写程序">8.3 使用对象编写程序</h4><h4 id="封装">8.4 封装</h4><h4 id="继承和多态">8.5 继承和多态</h4><h3 id="第九章-web应用程序开发和网络爬虫">第九章Web应用程序开发和网络爬虫</h3><h4 id="web应用程序开发概述">9.1 Web应用程序开发概述</h4><h4 id="web应用框架flask和文件模板">9.2 Web应用框架Flask和文件模板</h4><h4 id="云端部署web应用程序">9.3 云端部署Web应用程序</h4><h4 id="网络爬虫">9.4 网络爬虫</h4>]]></content>
    
    
    
    <tags>
      
      <tag>复习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
